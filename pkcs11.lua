
--PKCS11 v2.40 binding.
--Written by Cosmin Apreutesei. Public Domain.

local ffi = require'ffi'

local CK_UNAVAILABLE_INFORMATION = -1ULL

ffi.cdef[[
#pragma pack(1)
enum {
	CRYPTOKI_VERSION_MAJOR = 2,
	CRYPTOKI_VERSION_MINOR = 40,
	CRYPTOKI_VERSION_AMENDMENT = 0,
	CK_TRUE              = 1,
	CK_FALSE             = 0,
	FALSE                = CK_FALSE,
	TRUE                 = CK_TRUE,
};
typedef unsigned char CK_BYTE;
typedef CK_BYTE CK_CHAR;
typedef CK_BYTE CK_UTF8CHAR;
typedef CK_BYTE CK_BBOOL;
typedef unsigned long int CK_ULONG;
typedef long int CK_LONG;
typedef CK_ULONG CK_FLAGS;
enum {
	CK_EFFECTIVELY_INFINITE = 0UL,
};
typedef CK_BYTE * CK_BYTE_PTR;
typedef CK_CHAR * CK_CHAR_PTR;
typedef CK_UTF8CHAR * CK_UTF8CHAR_PTR;
typedef CK_ULONG * CK_ULONG_PTR;
typedef void * CK_VOID_PTR;
typedef CK_VOID_PTR * CK_VOID_PTR_PTR;
enum {
	CK_INVALID_HANDLE    = 0UL,
};
typedef struct CK_VERSION {
  CK_BYTE major;
  CK_BYTE minor;
} CK_VERSION;
typedef CK_VERSION * CK_VERSION_PTR;
typedef struct CK_INFO {
  CK_VERSION cryptokiVersion;
  CK_UTF8CHAR manufacturerID[32];
  CK_FLAGS flags;
  CK_UTF8CHAR libraryDescription[32];
  CK_VERSION libraryVersion;
} CK_INFO;
typedef CK_INFO * CK_INFO_PTR;
typedef CK_ULONG CK_NOTIFICATION;
enum {
	CKN_SURRENDER        = 0UL,
	CKN_OTP_CHANGED      = 1UL,
};
typedef CK_ULONG CK_SLOT_ID;
typedef CK_SLOT_ID * CK_SLOT_ID_PTR;
typedef struct CK_SLOT_INFO {
  CK_UTF8CHAR slotDescription[64];
  CK_UTF8CHAR manufacturerID[32];
  CK_FLAGS flags;
  CK_VERSION hardwareVersion;
  CK_VERSION firmwareVersion;
} CK_SLOT_INFO;
enum {
	CKF_TOKEN_PRESENT    = 0x00000001UL,
	CKF_REMOVABLE_DEVICE = 0x00000002UL,
	CKF_HW_SLOT          = 0x00000004UL,
};
typedef CK_SLOT_INFO * CK_SLOT_INFO_PTR;
typedef struct CK_TOKEN_INFO {
  CK_UTF8CHAR label[32];
  CK_UTF8CHAR manufacturerID[32];
  CK_UTF8CHAR model[16];
  CK_CHAR serialNumber[16];
  CK_FLAGS flags;
  CK_ULONG ulMaxSessionCount;
  CK_ULONG ulSessionCount;
  CK_ULONG ulMaxRwSessionCount;
  CK_ULONG ulRwSessionCount;
  CK_ULONG ulMaxPinLen;
  CK_ULONG ulMinPinLen;
  CK_ULONG ulTotalPublicMemory;
  CK_ULONG ulFreePublicMemory;
  CK_ULONG ulTotalPrivateMemory;
  CK_ULONG ulFreePrivateMemory;
  CK_VERSION hardwareVersion;
  CK_VERSION firmwareVersion;
  CK_CHAR utcTime[16];
} CK_TOKEN_INFO;
enum {
	CKF_RNG              = 0x00000001UL,
	CKF_WRITE_PROTECTED  = 0x00000002UL,
	CKF_LOGIN_REQUIRED   = 0x00000004UL,
	CKF_USER_PIN_INITIALIZED = 0x00000008UL,
	CKF_RESTORE_KEY_NOT_NEEDED = 0x00000020UL,
	CKF_CLOCK_ON_TOKEN   = 0x00000040UL,
	CKF_PROTECTED_AUTHENTICATION_PATH = 0x00000100UL,
	CKF_DUAL_CRYPTO_OPERATIONS = 0x00000200UL,
	CKF_TOKEN_INITIALIZED = 0x00000400UL,
	CKF_SECONDARY_AUTHENTICATION = 0x00000800UL,
	CKF_USER_PIN_COUNT_LOW = 0x00010000UL,
	CKF_USER_PIN_FINAL_TRY = 0x00020000UL,
	CKF_USER_PIN_LOCKED  = 0x00040000UL,
	CKF_USER_PIN_TO_BE_CHANGED = 0x00080000UL,
	CKF_SO_PIN_COUNT_LOW = 0x00100000UL,
	CKF_SO_PIN_FINAL_TRY = 0x00200000UL,
	CKF_SO_PIN_LOCKED    = 0x00400000UL,
	CKF_SO_PIN_TO_BE_CHANGED = 0x00800000UL,
	CKF_ERROR_STATE      = 0x01000000UL,
};
typedef CK_TOKEN_INFO * CK_TOKEN_INFO_PTR;
typedef CK_ULONG CK_SESSION_HANDLE;
typedef CK_SESSION_HANDLE * CK_SESSION_HANDLE_PTR;
typedef CK_ULONG CK_USER_TYPE;
enum {
	CKU_SO               = 0UL,
	CKU_USER             = 1UL,
	CKU_CONTEXT_SPECIFIC = 2UL,
};
typedef CK_ULONG CK_STATE;
enum {
	CKS_RO_PUBLIC_SESSION = 0UL,
	CKS_RO_USER_FUNCTIONS = 1UL,
	CKS_RW_PUBLIC_SESSION = 2UL,
	CKS_RW_USER_FUNCTIONS = 3UL,
	CKS_RW_SO_FUNCTIONS  = 4UL,
};
typedef struct CK_SESSION_INFO {
  CK_SLOT_ID slotID;
  CK_STATE state;
  CK_FLAGS flags;
  CK_ULONG ulDeviceError;
} CK_SESSION_INFO;
enum {
	CKF_RW_SESSION       = 0x00000002UL,
	CKF_SERIAL_SESSION   = 0x00000004UL,
};
typedef CK_SESSION_INFO * CK_SESSION_INFO_PTR;
typedef CK_ULONG CK_OBJECT_HANDLE;
typedef CK_OBJECT_HANDLE * CK_OBJECT_HANDLE_PTR;
typedef CK_ULONG CK_OBJECT_CLASS;
enum {
	CKO_DATA             = 0x00000000UL,
	CKO_CERTIFICATE      = 0x00000001UL,
	CKO_PUBLIC_KEY       = 0x00000002UL,
	CKO_PRIVATE_KEY      = 0x00000003UL,
	CKO_SECRET_KEY       = 0x00000004UL,
	CKO_HW_FEATURE       = 0x00000005UL,
	CKO_DOMAIN_PARAMETERS = 0x00000006UL,
	CKO_MECHANISM        = 0x00000007UL,
	CKO_OTP_KEY          = 0x00000008UL,
	CKO_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_OBJECT_CLASS * CK_OBJECT_CLASS_PTR;
typedef CK_ULONG CK_HW_FEATURE_TYPE;
enum {
	CKH_MONOTONIC_COUNTER = 0x00000001UL,
	CKH_CLOCK            = 0x00000002UL,
	CKH_USER_INTERFACE   = 0x00000003UL,
	CKH_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_ULONG CK_KEY_TYPE;
enum {
	CKK_RSA              = 0x00000000UL,
	CKK_DSA              = 0x00000001UL,
	CKK_DH               = 0x00000002UL,
	CKK_ECDSA            = 0x00000003UL,
	CKK_EC               = 0x00000003UL,
	CKK_X9_42_DH         = 0x00000004UL,
	CKK_KEA              = 0x00000005UL,
	CKK_GENERIC_SECRET   = 0x00000010UL,
	CKK_RC2              = 0x00000011UL,
	CKK_RC4              = 0x00000012UL,
	CKK_DES              = 0x00000013UL,
	CKK_DES2             = 0x00000014UL,
	CKK_DES3             = 0x00000015UL,
	CKK_CAST             = 0x00000016UL,
	CKK_CAST3            = 0x00000017UL,
	CKK_CAST5            = 0x00000018UL,
	CKK_CAST128          = 0x00000018UL,
	CKK_RC5              = 0x00000019UL,
	CKK_IDEA             = 0x0000001AUL,
	CKK_SKIPJACK         = 0x0000001BUL,
	CKK_BATON            = 0x0000001CUL,
	CKK_JUNIPER          = 0x0000001DUL,
	CKK_CDMF             = 0x0000001EUL,
	CKK_AES              = 0x0000001FUL,
	CKK_BLOWFISH         = 0x00000020UL,
	CKK_TWOFISH          = 0x00000021UL,
	CKK_SECURID          = 0x00000022UL,
	CKK_HOTP             = 0x00000023UL,
	CKK_ACTI             = 0x00000024UL,
	CKK_CAMELLIA         = 0x00000025UL,
	CKK_ARIA             = 0x00000026UL,
	CKK_SHA512_224_HMAC  = 0x00000027UL,
	CKK_SHA512_256_HMAC  = 0x00000028UL,
	CKK_SHA512_T_HMAC    = 0x00000029UL,
	CKK_SHA_1_HMAC       = 0x00000040UL,
	CKK_SHA224_HMAC      = 0x00000041UL,
	CKK_SHA256_HMAC      = 0x00000042UL,
	CKK_SHA384_HMAC      = 0x00000043UL,
	CKK_SHA512_HMAC      = 0x00000044UL,
	CKK_SEED             = 0x00000050UL,
	CKK_GOSTR3410        = 0x00000060UL,
	CKK_GOSTR3411        = 0x00000061UL,
	CKK_GOST28147        = 0x00000062UL,
	CKK_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_ULONG CK_CERTIFICATE_TYPE;
enum {
	CK_CERTIFICATE_CATEGORY_UNSPECIFIED = 0UL,
	CK_CERTIFICATE_CATEGORY_TOKEN_USER = 1UL,
	CK_CERTIFICATE_CATEGORY_AUTHORITY = 2UL,
	CK_CERTIFICATE_CATEGORY_OTHER_ENTITY = 3UL,
	CK_SECURITY_DOMAIN_UNSPECIFIED = 0UL,
	CK_SECURITY_DOMAIN_MANUFACTURER = 1UL,
	CK_SECURITY_DOMAIN_OPERATOR = 2UL,
	CK_SECURITY_DOMAIN_THIRD_PARTY = 3UL,
	CKC_X_509            = 0x00000000UL,
	CKC_X_509_ATTR_CERT  = 0x00000001UL,
	CKC_WTLS             = 0x00000002UL,
	CKC_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_ULONG CK_ATTRIBUTE_TYPE;
enum {
	CKF_ARRAY_ATTRIBUTE  = 0x40000000UL,
	CK_OTP_FORMAT_DECIMAL = 0UL,
	CK_OTP_FORMAT_HEXADECIMAL = 1UL,
	CK_OTP_FORMAT_ALPHANUMERIC = 2UL,
	CK_OTP_FORMAT_BINARY = 3UL,
	CK_OTP_PARAM_IGNORED = 0UL,
	CK_OTP_PARAM_OPTIONAL = 1UL,
	CK_OTP_PARAM_MANDATORY = 2UL,
	CKA_CLASS            = 0x00000000UL,
	CKA_TOKEN            = 0x00000001UL,
	CKA_PRIVATE          = 0x00000002UL,
	CKA_LABEL            = 0x00000003UL,
	CKA_APPLICATION      = 0x00000010UL,
	CKA_VALUE            = 0x00000011UL,
	CKA_OBJECT_ID        = 0x00000012UL,
	CKA_CERTIFICATE_TYPE = 0x00000080UL,
	CKA_ISSUER           = 0x00000081UL,
	CKA_SERIAL_NUMBER    = 0x00000082UL,
	CKA_AC_ISSUER        = 0x00000083UL,
	CKA_OWNER            = 0x00000084UL,
	CKA_ATTR_TYPES       = 0x00000085UL,
	CKA_TRUSTED          = 0x00000086UL,
	CKA_CERTIFICATE_CATEGORY = 0x00000087UL,
	CKA_JAVA_MIDP_SECURITY_DOMAIN = 0x00000088UL,
	CKA_URL              = 0x00000089UL,
	CKA_HASH_OF_SUBJECT_PUBLIC_KEY = 0x0000008AUL,
	CKA_HASH_OF_ISSUER_PUBLIC_KEY = 0x0000008BUL,
	CKA_NAME_HASH_ALGORITHM = 0x0000008CUL,
	CKA_CHECK_VALUE      = 0x00000090UL,
	CKA_KEY_TYPE         = 0x00000100UL,
	CKA_SUBJECT          = 0x00000101UL,
	CKA_ID               = 0x00000102UL,
	CKA_SENSITIVE        = 0x00000103UL,
	CKA_ENCRYPT          = 0x00000104UL,
	CKA_DECRYPT          = 0x00000105UL,
	CKA_WRAP             = 0x00000106UL,
	CKA_UNWRAP           = 0x00000107UL,
	CKA_SIGN             = 0x00000108UL,
	CKA_SIGN_RECOVER     = 0x00000109UL,
	CKA_VERIFY           = 0x0000010AUL,
	CKA_VERIFY_RECOVER   = 0x0000010BUL,
	CKA_DERIVE           = 0x0000010CUL,
	CKA_START_DATE       = 0x00000110UL,
	CKA_END_DATE         = 0x00000111UL,
	CKA_MODULUS          = 0x00000120UL,
	CKA_MODULUS_BITS     = 0x00000121UL,
	CKA_PUBLIC_EXPONENT  = 0x00000122UL,
	CKA_PRIVATE_EXPONENT = 0x00000123UL,
	CKA_PRIME_1          = 0x00000124UL,
	CKA_PRIME_2          = 0x00000125UL,
	CKA_EXPONENT_1       = 0x00000126UL,
	CKA_EXPONENT_2       = 0x00000127UL,
	CKA_COEFFICIENT      = 0x00000128UL,
	CKA_PUBLIC_KEY_INFO  = 0x00000129UL,
	CKA_PRIME            = 0x00000130UL,
	CKA_SUBPRIME         = 0x00000131UL,
	CKA_BASE             = 0x00000132UL,
	CKA_PRIME_BITS       = 0x00000133UL,
	CKA_SUBPRIME_BITS    = 0x00000134UL,
	CKA_SUB_PRIME_BITS   = CKA_SUBPRIME_BITS,
	CKA_VALUE_BITS       = 0x00000160UL,
	CKA_VALUE_LEN        = 0x00000161UL,
	CKA_EXTRACTABLE      = 0x00000162UL,
	CKA_LOCAL            = 0x00000163UL,
	CKA_NEVER_EXTRACTABLE = 0x00000164UL,
	CKA_ALWAYS_SENSITIVE = 0x00000165UL,
	CKA_KEY_GEN_MECHANISM = 0x00000166UL,
	CKA_MODIFIABLE       = 0x00000170UL,
	CKA_COPYABLE         = 0x00000171UL,
	CKA_DESTROYABLE      = 0x00000172UL,
	CKA_ECDSA_PARAMS     = 0x00000180UL,
	CKA_EC_PARAMS        = 0x00000180UL,
	CKA_EC_POINT         = 0x00000181UL,
	CKA_SECONDARY_AUTH   = 0x00000200UL,
	CKA_AUTH_PIN_FLAGS   = 0x00000201UL,
	CKA_ALWAYS_AUTHENTICATE = 0x00000202UL,
	CKA_WRAP_WITH_TRUSTED = 0x00000210UL,
	CKA_WRAP_TEMPLATE    = (CKF_ARRAY_ATTRIBUTE|0x00000211UL),
	CKA_UNWRAP_TEMPLATE  = (CKF_ARRAY_ATTRIBUTE|0x00000212UL),
	CKA_OTP_FORMAT       = 0x00000220UL,
	CKA_OTP_LENGTH       = 0x00000221UL,
	CKA_OTP_TIME_INTERVAL = 0x00000222UL,
	CKA_OTP_USER_FRIENDLY_MODE = 0x00000223UL,
	CKA_OTP_CHALLENGE_REQUIREMENT = 0x00000224UL,
	CKA_OTP_TIME_REQUIREMENT = 0x00000225UL,
	CKA_OTP_COUNTER_REQUIREMENT = 0x00000226UL,
	CKA_OTP_PIN_REQUIREMENT = 0x00000227UL,
	CKA_OTP_COUNTER      = 0x0000022EUL,
	CKA_OTP_TIME         = 0x0000022FUL,
	CKA_OTP_USER_IDENTIFIER = 0x0000022AUL,
	CKA_OTP_SERVICE_IDENTIFIER = 0x0000022BUL,
	CKA_OTP_SERVICE_LOGO = 0x0000022CUL,
	CKA_OTP_SERVICE_LOGO_TYPE = 0x0000022DUL,
	CKA_GOSTR3410_PARAMS = 0x00000250UL,
	CKA_GOSTR3411_PARAMS = 0x00000251UL,
	CKA_GOST28147_PARAMS = 0x00000252UL,
	CKA_HW_FEATURE_TYPE  = 0x00000300UL,
	CKA_RESET_ON_INIT    = 0x00000301UL,
	CKA_HAS_RESET        = 0x00000302UL,
	CKA_PIXEL_X          = 0x00000400UL,
	CKA_PIXEL_Y          = 0x00000401UL,
	CKA_RESOLUTION       = 0x00000402UL,
	CKA_CHAR_ROWS        = 0x00000403UL,
	CKA_CHAR_COLUMNS     = 0x00000404UL,
	CKA_COLOR            = 0x00000405UL,
	CKA_BITS_PER_PIXEL   = 0x00000406UL,
	CKA_CHAR_SETS        = 0x00000480UL,
	CKA_ENCODING_METHODS = 0x00000481UL,
	CKA_MIME_TYPES       = 0x00000482UL,
	CKA_MECHANISM_TYPE   = 0x00000500UL,
	CKA_REQUIRED_CMS_ATTRIBUTES = 0x00000501UL,
	CKA_DEFAULT_CMS_ATTRIBUTES = 0x00000502UL,
	CKA_SUPPORTED_CMS_ATTRIBUTES = 0x00000503UL,
	CKA_ALLOWED_MECHANISMS = (CKF_ARRAY_ATTRIBUTE|0x00000600UL),
	CKA_VENDOR_DEFINED   = 0x80000000UL,
};
typedef struct CK_ATTRIBUTE {
  CK_ATTRIBUTE_TYPE type;
  CK_VOID_PTR pValue;
  CK_ULONG ulValueLen;
} CK_ATTRIBUTE;
typedef CK_ATTRIBUTE * CK_ATTRIBUTE_PTR;
typedef struct CK_DATE{
  CK_CHAR year[4];
  CK_CHAR month[2];
  CK_CHAR day[2];
} CK_DATE;
typedef CK_ULONG CK_MECHANISM_TYPE;
enum {
	CKM_RSA_PKCS_KEY_PAIR_GEN = 0x00000000UL,
	CKM_RSA_PKCS         = 0x00000001UL,
	CKM_RSA_9796         = 0x00000002UL,
	CKM_RSA_X_509        = 0x00000003UL,
	CKM_MD2_RSA_PKCS     = 0x00000004UL,
	CKM_MD5_RSA_PKCS     = 0x00000005UL,
	CKM_SHA1_RSA_PKCS    = 0x00000006UL,
	CKM_RIPEMD128_RSA_PKCS = 0x00000007UL,
	CKM_RIPEMD160_RSA_PKCS = 0x00000008UL,
	CKM_RSA_PKCS_OAEP    = 0x00000009UL,
	CKM_RSA_X9_31_KEY_PAIR_GEN = 0x0000000AUL,
	CKM_RSA_X9_31        = 0x0000000BUL,
	CKM_SHA1_RSA_X9_31   = 0x0000000CUL,
	CKM_RSA_PKCS_PSS     = 0x0000000DUL,
	CKM_SHA1_RSA_PKCS_PSS = 0x0000000EUL,
	CKM_DSA_KEY_PAIR_GEN = 0x00000010UL,
	CKM_DSA              = 0x00000011UL,
	CKM_DSA_SHA1         = 0x00000012UL,
	CKM_DSA_FIPS_G_GEN   = 0x00000013UL,
	CKM_DSA_SHA224       = 0x00000014UL,
	CKM_DSA_SHA256       = 0x00000015UL,
	CKM_DSA_SHA384       = 0x00000016UL,
	CKM_DSA_SHA512       = 0x00000017UL,
	CKM_DH_PKCS_KEY_PAIR_GEN = 0x00000020UL,
	CKM_DH_PKCS_DERIVE   = 0x00000021UL,
	CKM_X9_42_DH_KEY_PAIR_GEN = 0x00000030UL,
	CKM_X9_42_DH_DERIVE  = 0x00000031UL,
	CKM_X9_42_DH_HYBRID_DERIVE = 0x00000032UL,
	CKM_X9_42_MQV_DERIVE = 0x00000033UL,
	CKM_SHA256_RSA_PKCS  = 0x00000040UL,
	CKM_SHA384_RSA_PKCS  = 0x00000041UL,
	CKM_SHA512_RSA_PKCS  = 0x00000042UL,
	CKM_SHA256_RSA_PKCS_PSS = 0x00000043UL,
	CKM_SHA384_RSA_PKCS_PSS = 0x00000044UL,
	CKM_SHA512_RSA_PKCS_PSS = 0x00000045UL,
	CKM_SHA224_RSA_PKCS  = 0x00000046UL,
	CKM_SHA224_RSA_PKCS_PSS = 0x00000047UL,
	CKM_SHA512_224       = 0x00000048UL,
	CKM_SHA512_224_HMAC  = 0x00000049UL,
	CKM_SHA512_224_HMAC_GENERAL = 0x0000004AUL,
	CKM_SHA512_224_KEY_DERIVATION = 0x0000004BUL,
	CKM_SHA512_256       = 0x0000004CUL,
	CKM_SHA512_256_HMAC  = 0x0000004DUL,
	CKM_SHA512_256_HMAC_GENERAL = 0x0000004EUL,
	CKM_SHA512_256_KEY_DERIVATION = 0x0000004FUL,
	CKM_SHA512_T         = 0x00000050UL,
	CKM_SHA512_T_HMAC    = 0x00000051UL,
	CKM_SHA512_T_HMAC_GENERAL = 0x00000052UL,
	CKM_SHA512_T_KEY_DERIVATION = 0x00000053UL,
	CKM_RC2_KEY_GEN      = 0x00000100UL,
	CKM_RC2_ECB          = 0x00000101UL,
	CKM_RC2_CBC          = 0x00000102UL,
	CKM_RC2_MAC          = 0x00000103UL,
	CKM_RC2_MAC_GENERAL  = 0x00000104UL,
	CKM_RC2_CBC_PAD      = 0x00000105UL,
	CKM_RC4_KEY_GEN      = 0x00000110UL,
	CKM_RC4              = 0x00000111UL,
	CKM_DES_KEY_GEN      = 0x00000120UL,
	CKM_DES_ECB          = 0x00000121UL,
	CKM_DES_CBC          = 0x00000122UL,
	CKM_DES_MAC          = 0x00000123UL,
	CKM_DES_MAC_GENERAL  = 0x00000124UL,
	CKM_DES_CBC_PAD      = 0x00000125UL,
	CKM_DES2_KEY_GEN     = 0x00000130UL,
	CKM_DES3_KEY_GEN     = 0x00000131UL,
	CKM_DES3_ECB         = 0x00000132UL,
	CKM_DES3_CBC         = 0x00000133UL,
	CKM_DES3_MAC         = 0x00000134UL,
	CKM_DES3_MAC_GENERAL = 0x00000135UL,
	CKM_DES3_CBC_PAD     = 0x00000136UL,
	CKM_DES3_CMAC_GENERAL = 0x00000137UL,
	CKM_DES3_CMAC        = 0x00000138UL,
	CKM_CDMF_KEY_GEN     = 0x00000140UL,
	CKM_CDMF_ECB         = 0x00000141UL,
	CKM_CDMF_CBC         = 0x00000142UL,
	CKM_CDMF_MAC         = 0x00000143UL,
	CKM_CDMF_MAC_GENERAL = 0x00000144UL,
	CKM_CDMF_CBC_PAD     = 0x00000145UL,
	CKM_DES_OFB64        = 0x00000150UL,
	CKM_DES_OFB8         = 0x00000151UL,
	CKM_DES_CFB64        = 0x00000152UL,
	CKM_DES_CFB8         = 0x00000153UL,
	CKM_MD2              = 0x00000200UL,
	CKM_MD2_HMAC         = 0x00000201UL,
	CKM_MD2_HMAC_GENERAL = 0x00000202UL,
	CKM_MD5              = 0x00000210UL,
	CKM_MD5_HMAC         = 0x00000211UL,
	CKM_MD5_HMAC_GENERAL = 0x00000212UL,
	CKM_SHA_1            = 0x00000220UL,
	CKM_SHA_1_HMAC       = 0x00000221UL,
	CKM_SHA_1_HMAC_GENERAL = 0x00000222UL,
	CKM_RIPEMD128        = 0x00000230UL,
	CKM_RIPEMD128_HMAC   = 0x00000231UL,
	CKM_RIPEMD128_HMAC_GENERAL = 0x00000232UL,
	CKM_RIPEMD160        = 0x00000240UL,
	CKM_RIPEMD160_HMAC   = 0x00000241UL,
	CKM_RIPEMD160_HMAC_GENERAL = 0x00000242UL,
	CKM_SHA256           = 0x00000250UL,
	CKM_SHA256_HMAC      = 0x00000251UL,
	CKM_SHA256_HMAC_GENERAL = 0x00000252UL,
	CKM_SHA224           = 0x00000255UL,
	CKM_SHA224_HMAC      = 0x00000256UL,
	CKM_SHA224_HMAC_GENERAL = 0x00000257UL,
	CKM_SHA384           = 0x00000260UL,
	CKM_SHA384_HMAC      = 0x00000261UL,
	CKM_SHA384_HMAC_GENERAL = 0x00000262UL,
	CKM_SHA512           = 0x00000270UL,
	CKM_SHA512_HMAC      = 0x00000271UL,
	CKM_SHA512_HMAC_GENERAL = 0x00000272UL,
	CKM_SECURID_KEY_GEN  = 0x00000280UL,
	CKM_SECURID          = 0x00000282UL,
	CKM_HOTP_KEY_GEN     = 0x00000290UL,
	CKM_HOTP             = 0x00000291UL,
	CKM_ACTI             = 0x000002A0UL,
	CKM_ACTI_KEY_GEN     = 0x000002A1UL,
	CKM_CAST_KEY_GEN     = 0x00000300UL,
	CKM_CAST_ECB         = 0x00000301UL,
	CKM_CAST_CBC         = 0x00000302UL,
	CKM_CAST_MAC         = 0x00000303UL,
	CKM_CAST_MAC_GENERAL = 0x00000304UL,
	CKM_CAST_CBC_PAD     = 0x00000305UL,
	CKM_CAST3_KEY_GEN    = 0x00000310UL,
	CKM_CAST3_ECB        = 0x00000311UL,
	CKM_CAST3_CBC        = 0x00000312UL,
	CKM_CAST3_MAC        = 0x00000313UL,
	CKM_CAST3_MAC_GENERAL = 0x00000314UL,
	CKM_CAST3_CBC_PAD    = 0x00000315UL,
	CKM_CAST5_KEY_GEN    = 0x00000320UL,
	CKM_CAST128_KEY_GEN  = 0x00000320UL,
	CKM_CAST5_ECB        = 0x00000321UL,
	CKM_CAST128_ECB      = 0x00000321UL,
	CKM_CAST5_CBC        = 0x00000322UL,
	CKM_CAST128_CBC      = 0x00000322UL,
	CKM_CAST5_MAC        = 0x00000323UL,
	CKM_CAST128_MAC      = 0x00000323UL,
	CKM_CAST5_MAC_GENERAL = 0x00000324UL,
	CKM_CAST128_MAC_GENERAL = 0x00000324UL,
	CKM_CAST5_CBC_PAD    = 0x00000325UL,
	CKM_CAST128_CBC_PAD  = 0x00000325UL,
	CKM_RC5_KEY_GEN      = 0x00000330UL,
	CKM_RC5_ECB          = 0x00000331UL,
	CKM_RC5_CBC          = 0x00000332UL,
	CKM_RC5_MAC          = 0x00000333UL,
	CKM_RC5_MAC_GENERAL  = 0x00000334UL,
	CKM_RC5_CBC_PAD      = 0x00000335UL,
	CKM_IDEA_KEY_GEN     = 0x00000340UL,
	CKM_IDEA_ECB         = 0x00000341UL,
	CKM_IDEA_CBC         = 0x00000342UL,
	CKM_IDEA_MAC         = 0x00000343UL,
	CKM_IDEA_MAC_GENERAL = 0x00000344UL,
	CKM_IDEA_CBC_PAD     = 0x00000345UL,
	CKM_GENERIC_SECRET_KEY_GEN = 0x00000350UL,
	CKM_CONCATENATE_BASE_AND_KEY = 0x00000360UL,
	CKM_CONCATENATE_BASE_AND_DATA = 0x00000362UL,
	CKM_CONCATENATE_DATA_AND_BASE = 0x00000363UL,
	CKM_XOR_BASE_AND_DATA = 0x00000364UL,
	CKM_EXTRACT_KEY_FROM_KEY = 0x00000365UL,
	CKM_SSL3_PRE_MASTER_KEY_GEN = 0x00000370UL,
	CKM_SSL3_MASTER_KEY_DERIVE = 0x00000371UL,
	CKM_SSL3_KEY_AND_MAC_DERIVE = 0x00000372UL,
	CKM_SSL3_MASTER_KEY_DERIVE_DH = 0x00000373UL,
	CKM_TLS_PRE_MASTER_KEY_GEN = 0x00000374UL,
	CKM_TLS_MASTER_KEY_DERIVE = 0x00000375UL,
	CKM_TLS_KEY_AND_MAC_DERIVE = 0x00000376UL,
	CKM_TLS_MASTER_KEY_DERIVE_DH = 0x00000377UL,
	CKM_TLS_PRF          = 0x00000378UL,
	CKM_SSL3_MD5_MAC     = 0x00000380UL,
	CKM_SSL3_SHA1_MAC    = 0x00000381UL,
	CKM_MD5_KEY_DERIVATION = 0x00000390UL,
	CKM_MD2_KEY_DERIVATION = 0x00000391UL,
	CKM_SHA1_KEY_DERIVATION = 0x00000392UL,
	CKM_SHA256_KEY_DERIVATION = 0x00000393UL,
	CKM_SHA384_KEY_DERIVATION = 0x00000394UL,
	CKM_SHA512_KEY_DERIVATION = 0x00000395UL,
	CKM_SHA224_KEY_DERIVATION = 0x00000396UL,
	CKM_PBE_MD2_DES_CBC  = 0x000003A0UL,
	CKM_PBE_MD5_DES_CBC  = 0x000003A1UL,
	CKM_PBE_MD5_CAST_CBC = 0x000003A2UL,
	CKM_PBE_MD5_CAST3_CBC = 0x000003A3UL,
	CKM_PBE_MD5_CAST5_CBC = 0x000003A4UL,
	CKM_PBE_MD5_CAST128_CBC = 0x000003A4UL,
	CKM_PBE_SHA1_CAST5_CBC = 0x000003A5UL,
	CKM_PBE_SHA1_CAST128_CBC = 0x000003A5UL,
	CKM_PBE_SHA1_RC4_128 = 0x000003A6UL,
	CKM_PBE_SHA1_RC4_40  = 0x000003A7UL,
	CKM_PBE_SHA1_DES3_EDE_CBC = 0x000003A8UL,
	CKM_PBE_SHA1_DES2_EDE_CBC = 0x000003A9UL,
	CKM_PBE_SHA1_RC2_128_CBC = 0x000003AAUL,
	CKM_PBE_SHA1_RC2_40_CBC = 0x000003ABUL,
	CKM_PKCS5_PBKD2      = 0x000003B0UL,
	CKM_PBA_SHA1_WITH_SHA1_HMAC = 0x000003C0UL,
	CKM_WTLS_PRE_MASTER_KEY_GEN = 0x000003D0UL,
	CKM_WTLS_MASTER_KEY_DERIVE = 0x000003D1UL,
	CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC = 0x000003D2UL,
	CKM_WTLS_PRF         = 0x000003D3UL,
	CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE = 0x000003D4UL,
	CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE = 0x000003D5UL,
	CKM_TLS10_MAC_SERVER = 0x000003D6UL,
	CKM_TLS10_MAC_CLIENT = 0x000003D7UL,
	CKM_TLS12_MAC        = 0x000003D8UL,
	CKM_TLS12_KDF        = 0x000003D9UL,
	CKM_TLS12_MASTER_KEY_DERIVE = 0x000003E0UL,
	CKM_TLS12_KEY_AND_MAC_DERIVE = 0x000003E1UL,
	CKM_TLS12_MASTER_KEY_DERIVE_DH = 0x000003E2UL,
	CKM_TLS12_KEY_SAFE_DERIVE = 0x000003E3UL,
	CKM_TLS_MAC          = 0x000003E4UL,
	CKM_TLS_KDF          = 0x000003E5UL,
	CKM_KEY_WRAP_LYNKS   = 0x00000400UL,
	CKM_KEY_WRAP_SET_OAEP = 0x00000401UL,
	CKM_CMS_SIG          = 0x00000500UL,
	CKM_KIP_DERIVE       = 0x00000510UL,
	CKM_KIP_WRAP         = 0x00000511UL,
	CKM_KIP_MAC          = 0x00000512UL,
	CKM_CAMELLIA_KEY_GEN = 0x00000550UL,
	CKM_CAMELLIA_ECB     = 0x00000551UL,
	CKM_CAMELLIA_CBC     = 0x00000552UL,
	CKM_CAMELLIA_MAC     = 0x00000553UL,
	CKM_CAMELLIA_MAC_GENERAL = 0x00000554UL,
	CKM_CAMELLIA_CBC_PAD = 0x00000555UL,
	CKM_CAMELLIA_ECB_ENCRYPT_DATA = 0x00000556UL,
	CKM_CAMELLIA_CBC_ENCRYPT_DATA = 0x00000557UL,
	CKM_CAMELLIA_CTR     = 0x00000558UL,
	CKM_ARIA_KEY_GEN     = 0x00000560UL,
	CKM_ARIA_ECB         = 0x00000561UL,
	CKM_ARIA_CBC         = 0x00000562UL,
	CKM_ARIA_MAC         = 0x00000563UL,
	CKM_ARIA_MAC_GENERAL = 0x00000564UL,
	CKM_ARIA_CBC_PAD     = 0x00000565UL,
	CKM_ARIA_ECB_ENCRYPT_DATA = 0x00000566UL,
	CKM_ARIA_CBC_ENCRYPT_DATA = 0x00000567UL,
	CKM_SEED_KEY_GEN     = 0x00000650UL,
	CKM_SEED_ECB         = 0x00000651UL,
	CKM_SEED_CBC         = 0x00000652UL,
	CKM_SEED_MAC         = 0x00000653UL,
	CKM_SEED_MAC_GENERAL = 0x00000654UL,
	CKM_SEED_CBC_PAD     = 0x00000655UL,
	CKM_SEED_ECB_ENCRYPT_DATA = 0x00000656UL,
	CKM_SEED_CBC_ENCRYPT_DATA = 0x00000657UL,
	CKM_SKIPJACK_KEY_GEN = 0x00001000UL,
	CKM_SKIPJACK_ECB64   = 0x00001001UL,
	CKM_SKIPJACK_CBC64   = 0x00001002UL,
	CKM_SKIPJACK_OFB64   = 0x00001003UL,
	CKM_SKIPJACK_CFB64   = 0x00001004UL,
	CKM_SKIPJACK_CFB32   = 0x00001005UL,
	CKM_SKIPJACK_CFB16   = 0x00001006UL,
	CKM_SKIPJACK_CFB8    = 0x00001007UL,
	CKM_SKIPJACK_WRAP    = 0x00001008UL,
	CKM_SKIPJACK_PRIVATE_WRAP = 0x00001009UL,
	CKM_SKIPJACK_RELAYX  = 0x0000100aUL,
	CKM_KEA_KEY_PAIR_GEN = 0x00001010UL,
	CKM_KEA_KEY_DERIVE   = 0x00001011UL,
	CKM_KEA_DERIVE       = 0x00001012UL,
	CKM_FORTEZZA_TIMESTAMP = 0x00001020UL,
	CKM_BATON_KEY_GEN    = 0x00001030UL,
	CKM_BATON_ECB128     = 0x00001031UL,
	CKM_BATON_ECB96      = 0x00001032UL,
	CKM_BATON_CBC128     = 0x00001033UL,
	CKM_BATON_COUNTER    = 0x00001034UL,
	CKM_BATON_SHUFFLE    = 0x00001035UL,
	CKM_BATON_WRAP       = 0x00001036UL,
	CKM_ECDSA_KEY_PAIR_GEN = 0x00001040UL,
	CKM_EC_KEY_PAIR_GEN  = 0x00001040UL,
	CKM_ECDSA            = 0x00001041UL,
	CKM_ECDSA_SHA1       = 0x00001042UL,
	CKM_ECDH1_DERIVE     = 0x00001050UL,
	CKM_ECDH1_COFACTOR_DERIVE = 0x00001051UL,
	CKM_ECMQV_DERIVE     = 0x00001052UL,
	CKM_ECDH_AES_KEY_WRAP = 0x00001053UL,
	CKM_RSA_AES_KEY_WRAP = 0x00001054UL,
	CKM_JUNIPER_KEY_GEN  = 0x00001060UL,
	CKM_JUNIPER_ECB128   = 0x00001061UL,
	CKM_JUNIPER_CBC128   = 0x00001062UL,
	CKM_JUNIPER_COUNTER  = 0x00001063UL,
	CKM_JUNIPER_SHUFFLE  = 0x00001064UL,
	CKM_JUNIPER_WRAP     = 0x00001065UL,
	CKM_FASTHASH         = 0x00001070UL,
	CKM_AES_KEY_GEN      = 0x00001080UL,
	CKM_AES_ECB          = 0x00001081UL,
	CKM_AES_CBC          = 0x00001082UL,
	CKM_AES_MAC          = 0x00001083UL,
	CKM_AES_MAC_GENERAL  = 0x00001084UL,
	CKM_AES_CBC_PAD      = 0x00001085UL,
	CKM_AES_CTR          = 0x00001086UL,
	CKM_AES_GCM          = 0x00001087UL,
	CKM_AES_CCM          = 0x00001088UL,
	CKM_AES_CMAC_GENERAL = 0x00001089UL,
	CKM_AES_CMAC         = 0x0000108AUL,
	CKM_AES_CTS          = 0x0000108BUL,
	CKM_AES_XCBC_MAC     = 0x0000108CUL,
	CKM_AES_XCBC_MAC_96  = 0x0000108DUL,
	CKM_AES_GMAC         = 0x0000108EUL,
	CKM_BLOWFISH_KEY_GEN = 0x00001090UL,
	CKM_BLOWFISH_CBC     = 0x00001091UL,
	CKM_TWOFISH_KEY_GEN  = 0x00001092UL,
	CKM_TWOFISH_CBC      = 0x00001093UL,
	CKM_BLOWFISH_CBC_PAD = 0x00001094UL,
	CKM_TWOFISH_CBC_PAD  = 0x00001095UL,
	CKM_DES_ECB_ENCRYPT_DATA = 0x00001100UL,
	CKM_DES_CBC_ENCRYPT_DATA = 0x00001101UL,
	CKM_DES3_ECB_ENCRYPT_DATA = 0x00001102UL,
	CKM_DES3_CBC_ENCRYPT_DATA = 0x00001103UL,
	CKM_AES_ECB_ENCRYPT_DATA = 0x00001104UL,
	CKM_AES_CBC_ENCRYPT_DATA = 0x00001105UL,
	CKM_GOSTR3410_KEY_PAIR_GEN = 0x00001200UL,
	CKM_GOSTR3410        = 0x00001201UL,
	CKM_GOSTR3410_WITH_GOSTR3411 = 0x00001202UL,
	CKM_GOSTR3410_KEY_WRAP = 0x00001203UL,
	CKM_GOSTR3410_DERIVE = 0x00001204UL,
	CKM_GOSTR3411        = 0x00001210UL,
	CKM_GOSTR3411_HMAC   = 0x00001211UL,
	CKM_GOST28147_KEY_GEN = 0x00001220UL,
	CKM_GOST28147_ECB    = 0x00001221UL,
	CKM_GOST28147        = 0x00001222UL,
	CKM_GOST28147_MAC    = 0x00001223UL,
	CKM_GOST28147_KEY_WRAP = 0x00001224UL,
	CKM_DSA_PARAMETER_GEN = 0x00002000UL,
	CKM_DH_PKCS_PARAMETER_GEN = 0x00002001UL,
	CKM_X9_42_DH_PARAMETER_GEN = 0x00002002UL,
	CKM_DSA_PROBABLISTIC_PARAMETER_GEN = 0x00002003UL,
	CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN = 0x00002004UL,
	CKM_AES_OFB          = 0x00002104UL,
	CKM_AES_CFB64        = 0x00002105UL,
	CKM_AES_CFB8         = 0x00002106UL,
	CKM_AES_CFB128       = 0x00002107UL,
	CKM_AES_CFB1         = 0x00002108UL,
	CKM_AES_KEY_WRAP     = 0x00002109UL,
	CKM_AES_KEY_WRAP_PAD = 0x0000210AUL,
	CKM_RSA_PKCS_TPM_1_1 = 0x00004001UL,
	CKM_RSA_PKCS_OAEP_TPM_1_1 = 0x00004002UL,
	CKM_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_MECHANISM_TYPE * CK_MECHANISM_TYPE_PTR;
typedef struct CK_MECHANISM {
  CK_MECHANISM_TYPE mechanism;
  CK_VOID_PTR pParameter;
  CK_ULONG ulParameterLen;
} CK_MECHANISM;
typedef CK_MECHANISM * CK_MECHANISM_PTR;
typedef struct CK_MECHANISM_INFO {
    CK_ULONG ulMinKeySize;
    CK_ULONG ulMaxKeySize;
    CK_FLAGS flags;
} CK_MECHANISM_INFO;
enum {
	CKF_HW               = 0x00000001UL,
	CKF_ENCRYPT          = 0x00000100UL,
	CKF_DECRYPT          = 0x00000200UL,
	CKF_DIGEST           = 0x00000400UL,
	CKF_SIGN             = 0x00000800UL,
	CKF_SIGN_RECOVER     = 0x00001000UL,
	CKF_VERIFY           = 0x00002000UL,
	CKF_VERIFY_RECOVER   = 0x00004000UL,
	CKF_GENERATE         = 0x00008000UL,
	CKF_GENERATE_KEY_PAIR = 0x00010000UL,
	CKF_WRAP             = 0x00020000UL,
	CKF_UNWRAP           = 0x00040000UL,
	CKF_DERIVE           = 0x00080000UL,
	CKF_EC_F_P           = 0x00100000UL,
	CKF_EC_F_2M          = 0x00200000UL,
	CKF_EC_ECPARAMETERS  = 0x00400000UL,
	CKF_EC_NAMEDCURVE    = 0x00800000UL,
	CKF_EC_UNCOMPRESS    = 0x01000000UL,
	CKF_EC_COMPRESS      = 0x02000000UL,
	CKF_EXTENSION        = 0x80000000UL,
};
typedef CK_MECHANISM_INFO * CK_MECHANISM_INFO_PTR;
typedef CK_ULONG CK_RV;
enum {
	CKR_OK               = 0x00000000UL,
	CKR_CANCEL           = 0x00000001UL,
	CKR_HOST_MEMORY      = 0x00000002UL,
	CKR_SLOT_ID_INVALID  = 0x00000003UL,
	CKR_GENERAL_ERROR    = 0x00000005UL,
	CKR_FUNCTION_FAILED  = 0x00000006UL,
	CKR_ARGUMENTS_BAD    = 0x00000007UL,
	CKR_NO_EVENT         = 0x00000008UL,
	CKR_NEED_TO_CREATE_THREADS = 0x00000009UL,
	CKR_CANT_LOCK        = 0x0000000AUL,
	CKR_ATTRIBUTE_READ_ONLY = 0x00000010UL,
	CKR_ATTRIBUTE_SENSITIVE = 0x00000011UL,
	CKR_ATTRIBUTE_TYPE_INVALID = 0x00000012UL,
	CKR_ATTRIBUTE_VALUE_INVALID = 0x00000013UL,
	CKR_ACTION_PROHIBITED = 0x0000001BUL,
	CKR_DATA_INVALID     = 0x00000020UL,
	CKR_DATA_LEN_RANGE   = 0x00000021UL,
	CKR_DEVICE_ERROR     = 0x00000030UL,
	CKR_DEVICE_MEMORY    = 0x00000031UL,
	CKR_DEVICE_REMOVED   = 0x00000032UL,
	CKR_ENCRYPTED_DATA_INVALID = 0x00000040UL,
	CKR_ENCRYPTED_DATA_LEN_RANGE = 0x00000041UL,
	CKR_FUNCTION_CANCELED = 0x00000050UL,
	CKR_FUNCTION_NOT_PARALLEL = 0x00000051UL,
	CKR_FUNCTION_NOT_SUPPORTED = 0x00000054UL,
	CKR_KEY_HANDLE_INVALID = 0x00000060UL,
	CKR_KEY_SIZE_RANGE   = 0x00000062UL,
	CKR_KEY_TYPE_INCONSISTENT = 0x00000063UL,
	CKR_KEY_NOT_NEEDED   = 0x00000064UL,
	CKR_KEY_CHANGED      = 0x00000065UL,
	CKR_KEY_NEEDED       = 0x00000066UL,
	CKR_KEY_INDIGESTIBLE = 0x00000067UL,
	CKR_KEY_FUNCTION_NOT_PERMITTED = 0x00000068UL,
	CKR_KEY_NOT_WRAPPABLE = 0x00000069UL,
	CKR_KEY_UNEXTRACTABLE = 0x0000006AUL,
	CKR_MECHANISM_INVALID = 0x00000070UL,
	CKR_MECHANISM_PARAM_INVALID = 0x00000071UL,
	CKR_OBJECT_HANDLE_INVALID = 0x00000082UL,
	CKR_OPERATION_ACTIVE = 0x00000090UL,
	CKR_OPERATION_NOT_INITIALIZED = 0x00000091UL,
	CKR_PIN_INCORRECT    = 0x000000A0UL,
	CKR_PIN_INVALID      = 0x000000A1UL,
	CKR_PIN_LEN_RANGE    = 0x000000A2UL,
	CKR_PIN_EXPIRED      = 0x000000A3UL,
	CKR_PIN_LOCKED       = 0x000000A4UL,
	CKR_SESSION_CLOSED   = 0x000000B0UL,
	CKR_SESSION_COUNT    = 0x000000B1UL,
	CKR_SESSION_HANDLE_INVALID = 0x000000B3UL,
	CKR_SESSION_PARALLEL_NOT_SUPPORTED = 0x000000B4UL,
	CKR_SESSION_READ_ONLY = 0x000000B5UL,
	CKR_SESSION_EXISTS   = 0x000000B6UL,
	CKR_SESSION_READ_ONLY_EXISTS = 0x000000B7UL,
	CKR_SESSION_READ_WRITE_SO_EXISTS = 0x000000B8UL,
	CKR_SIGNATURE_INVALID = 0x000000C0UL,
	CKR_SIGNATURE_LEN_RANGE = 0x000000C1UL,
	CKR_TEMPLATE_INCOMPLETE = 0x000000D0UL,
	CKR_TEMPLATE_INCONSISTENT = 0x000000D1UL,
	CKR_TOKEN_NOT_PRESENT = 0x000000E0UL,
	CKR_TOKEN_NOT_RECOGNIZED = 0x000000E1UL,
	CKR_TOKEN_WRITE_PROTECTED = 0x000000E2UL,
	CKR_UNWRAPPING_KEY_HANDLE_INVALID = 0x000000F0UL,
	CKR_UNWRAPPING_KEY_SIZE_RANGE = 0x000000F1UL,
	CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = 0x000000F2UL,
	CKR_USER_ALREADY_LOGGED_IN = 0x00000100UL,
	CKR_USER_NOT_LOGGED_IN = 0x00000101UL,
	CKR_USER_PIN_NOT_INITIALIZED = 0x00000102UL,
	CKR_USER_TYPE_INVALID = 0x00000103UL,
	CKR_USER_ANOTHER_ALREADY_LOGGED_IN = 0x00000104UL,
	CKR_USER_TOO_MANY_TYPES = 0x00000105UL,
	CKR_WRAPPED_KEY_INVALID = 0x00000110UL,
	CKR_WRAPPED_KEY_LEN_RANGE = 0x00000112UL,
	CKR_WRAPPING_KEY_HANDLE_INVALID = 0x00000113UL,
	CKR_WRAPPING_KEY_SIZE_RANGE = 0x00000114UL,
	CKR_WRAPPING_KEY_TYPE_INCONSISTENT = 0x00000115UL,
	CKR_RANDOM_SEED_NOT_SUPPORTED = 0x00000120UL,
	CKR_RANDOM_NO_RNG    = 0x00000121UL,
	CKR_DOMAIN_PARAMS_INVALID = 0x00000130UL,
	CKR_CURVE_NOT_SUPPORTED = 0x00000140UL,
	CKR_BUFFER_TOO_SMALL = 0x00000150UL,
	CKR_SAVED_STATE_INVALID = 0x00000160UL,
	CKR_INFORMATION_SENSITIVE = 0x00000170UL,
	CKR_STATE_UNSAVEABLE = 0x00000180UL,
	CKR_CRYPTOKI_NOT_INITIALIZED = 0x00000190UL,
	CKR_CRYPTOKI_ALREADY_INITIALIZED = 0x00000191UL,
	CKR_MUTEX_BAD        = 0x000001A0UL,
	CKR_MUTEX_NOT_LOCKED = 0x000001A1UL,
	CKR_NEW_PIN_MODE     = 0x000001B0UL,
	CKR_NEXT_OTP         = 0x000001B1UL,
	CKR_EXCEEDED_MAX_ITERATIONS = 0x000001C0UL,
	CKR_FIPS_SELF_TEST_FAILED = 0x000001C1UL,
	CKR_LIBRARY_LOAD_FAILED = 0x000001C2UL,
	CKR_PIN_TOO_WEAK     = 0x000001C3UL,
	CKR_PUBLIC_KEY_INVALID = 0x000001C4UL,
	CKR_FUNCTION_REJECTED = 0x00000200UL,
	CKR_VENDOR_DEFINED   = 0x80000000UL,
};
typedef CK_RV (* CK_NOTIFY)(
  CK_SESSION_HANDLE hSession,
  CK_NOTIFICATION event,
  CK_VOID_PTR pApplication
);
struct CK_FUNCTION_LIST {
  CK_VERSION version;
};
typedef struct CK_FUNCTION_LIST CK_FUNCTION_LIST;
typedef CK_FUNCTION_LIST * CK_FUNCTION_LIST_PTR;
typedef CK_FUNCTION_LIST_PTR * CK_FUNCTION_LIST_PTR_PTR;
typedef CK_RV (* CK_CREATEMUTEX)(
  CK_VOID_PTR_PTR ppMutex
);
typedef CK_RV (* CK_DESTROYMUTEX)(
  CK_VOID_PTR pMutex
);
typedef CK_RV (* CK_LOCKMUTEX)(
  CK_VOID_PTR pMutex
);
typedef CK_RV (* CK_UNLOCKMUTEX)(
  CK_VOID_PTR pMutex
);
typedef struct CK_C_INITIALIZE_ARGS {
  CK_CREATEMUTEX CreateMutex;
  CK_DESTROYMUTEX DestroyMutex;
  CK_LOCKMUTEX LockMutex;
  CK_UNLOCKMUTEX UnlockMutex;
  CK_FLAGS flags;
  CK_VOID_PTR pReserved;
} CK_C_INITIALIZE_ARGS;
enum {
	CKF_LIBRARY_CANT_CREATE_OS_THREADS = 0x00000001UL,
	CKF_OS_LOCKING_OK    = 0x00000002UL,
};
typedef CK_C_INITIALIZE_ARGS * CK_C_INITIALIZE_ARGS_PTR;
enum {
	CKF_DONT_BLOCK       = 1,
};
typedef CK_ULONG CK_RSA_PKCS_MGF_TYPE;
typedef CK_RSA_PKCS_MGF_TYPE * CK_RSA_PKCS_MGF_TYPE_PTR;
enum {
	CKG_MGF1_SHA1        = 0x00000001UL,
	CKG_MGF1_SHA256      = 0x00000002UL,
	CKG_MGF1_SHA384      = 0x00000003UL,
	CKG_MGF1_SHA512      = 0x00000004UL,
	CKG_MGF1_SHA224      = 0x00000005UL,
};
typedef CK_ULONG CK_RSA_PKCS_OAEP_SOURCE_TYPE;
typedef CK_RSA_PKCS_OAEP_SOURCE_TYPE * CK_RSA_PKCS_OAEP_SOURCE_TYPE_PTR;
enum {
	CKZ_DATA_SPECIFIED   = 0x00000001UL,
};
typedef struct CK_RSA_PKCS_OAEP_PARAMS {
        CK_MECHANISM_TYPE hashAlg;
        CK_RSA_PKCS_MGF_TYPE mgf;
        CK_RSA_PKCS_OAEP_SOURCE_TYPE source;
        CK_VOID_PTR pSourceData;
        CK_ULONG ulSourceDataLen;
} CK_RSA_PKCS_OAEP_PARAMS;
typedef CK_RSA_PKCS_OAEP_PARAMS * CK_RSA_PKCS_OAEP_PARAMS_PTR;
typedef struct CK_RSA_PKCS_PSS_PARAMS {
        CK_MECHANISM_TYPE hashAlg;
        CK_RSA_PKCS_MGF_TYPE mgf;
        CK_ULONG sLen;
} CK_RSA_PKCS_PSS_PARAMS;
typedef CK_RSA_PKCS_PSS_PARAMS * CK_RSA_PKCS_PSS_PARAMS_PTR;
typedef CK_ULONG CK_EC_KDF_TYPE;
enum {
	CKD_NULL             = 0x00000001UL,
	CKD_SHA1_KDF         = 0x00000002UL,
	CKD_SHA1_KDF_ASN1    = 0x00000003UL,
	CKD_SHA1_KDF_CONCATENATE = 0x00000004UL,
	CKD_SHA224_KDF       = 0x00000005UL,
	CKD_SHA256_KDF       = 0x00000006UL,
	CKD_SHA384_KDF       = 0x00000007UL,
	CKD_SHA512_KDF       = 0x00000008UL,
	CKD_CPDIVERSIFY_KDF  = 0x00000009UL,
};
typedef struct CK_ECDH1_DERIVE_PARAMS {
  CK_EC_KDF_TYPE kdf;
  CK_ULONG ulSharedDataLen;
  CK_BYTE_PTR pSharedData;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
} CK_ECDH1_DERIVE_PARAMS;
typedef CK_ECDH1_DERIVE_PARAMS * CK_ECDH1_DERIVE_PARAMS_PTR;
typedef struct CK_ECMQV_DERIVE_PARAMS {
  CK_EC_KDF_TYPE kdf;
  CK_ULONG ulSharedDataLen;
  CK_BYTE_PTR pSharedData;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
  CK_ULONG ulPrivateDataLen;
  CK_OBJECT_HANDLE hPrivateData;
  CK_ULONG ulPublicDataLen2;
  CK_BYTE_PTR pPublicData2;
  CK_OBJECT_HANDLE publicKey;
} CK_ECMQV_DERIVE_PARAMS;
typedef CK_ECMQV_DERIVE_PARAMS * CK_ECMQV_DERIVE_PARAMS_PTR;
typedef CK_ULONG CK_X9_42_DH_KDF_TYPE;
typedef CK_X9_42_DH_KDF_TYPE * CK_X9_42_DH_KDF_TYPE_PTR;
typedef struct CK_X9_42_DH1_DERIVE_PARAMS {
  CK_X9_42_DH_KDF_TYPE kdf;
  CK_ULONG ulOtherInfoLen;
  CK_BYTE_PTR pOtherInfo;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
} CK_X9_42_DH1_DERIVE_PARAMS;
typedef struct CK_X9_42_DH1_DERIVE_PARAMS * CK_X9_42_DH1_DERIVE_PARAMS_PTR;
typedef struct CK_X9_42_DH2_DERIVE_PARAMS {
  CK_X9_42_DH_KDF_TYPE kdf;
  CK_ULONG ulOtherInfoLen;
  CK_BYTE_PTR pOtherInfo;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
  CK_ULONG ulPrivateDataLen;
  CK_OBJECT_HANDLE hPrivateData;
  CK_ULONG ulPublicDataLen2;
  CK_BYTE_PTR pPublicData2;
} CK_X9_42_DH2_DERIVE_PARAMS;
typedef CK_X9_42_DH2_DERIVE_PARAMS * CK_X9_42_DH2_DERIVE_PARAMS_PTR;
typedef struct CK_X9_42_MQV_DERIVE_PARAMS {
  CK_X9_42_DH_KDF_TYPE kdf;
  CK_ULONG ulOtherInfoLen;
  CK_BYTE_PTR pOtherInfo;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
  CK_ULONG ulPrivateDataLen;
  CK_OBJECT_HANDLE hPrivateData;
  CK_ULONG ulPublicDataLen2;
  CK_BYTE_PTR pPublicData2;
  CK_OBJECT_HANDLE publicKey;
} CK_X9_42_MQV_DERIVE_PARAMS;
typedef CK_X9_42_MQV_DERIVE_PARAMS * CK_X9_42_MQV_DERIVE_PARAMS_PTR;
typedef struct CK_KEA_DERIVE_PARAMS {
  CK_BBOOL isSender;
  CK_ULONG ulRandomLen;
  CK_BYTE_PTR pRandomA;
  CK_BYTE_PTR pRandomB;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
} CK_KEA_DERIVE_PARAMS;
typedef CK_KEA_DERIVE_PARAMS * CK_KEA_DERIVE_PARAMS_PTR;
typedef CK_ULONG CK_RC2_PARAMS;
typedef CK_RC2_PARAMS * CK_RC2_PARAMS_PTR;
typedef struct CK_RC2_CBC_PARAMS {
  CK_ULONG ulEffectiveBits;
  CK_BYTE iv[8];
} CK_RC2_CBC_PARAMS;
typedef CK_RC2_CBC_PARAMS * CK_RC2_CBC_PARAMS_PTR;
typedef struct CK_RC2_MAC_GENERAL_PARAMS {
  CK_ULONG ulEffectiveBits;
  CK_ULONG ulMacLength;
} CK_RC2_MAC_GENERAL_PARAMS;
typedef CK_RC2_MAC_GENERAL_PARAMS *
  CK_RC2_MAC_GENERAL_PARAMS_PTR;
typedef struct CK_RC5_PARAMS {
  CK_ULONG ulWordsize;
  CK_ULONG ulRounds;
} CK_RC5_PARAMS;
typedef CK_RC5_PARAMS * CK_RC5_PARAMS_PTR;
typedef struct CK_RC5_CBC_PARAMS {
  CK_ULONG ulWordsize;
  CK_ULONG ulRounds;
  CK_BYTE_PTR pIv;
  CK_ULONG ulIvLen;
} CK_RC5_CBC_PARAMS;
typedef CK_RC5_CBC_PARAMS * CK_RC5_CBC_PARAMS_PTR;
typedef struct CK_RC5_MAC_GENERAL_PARAMS {
  CK_ULONG ulWordsize;
  CK_ULONG ulRounds;
  CK_ULONG ulMacLength;
} CK_RC5_MAC_GENERAL_PARAMS;
typedef CK_RC5_MAC_GENERAL_PARAMS *
  CK_RC5_MAC_GENERAL_PARAMS_PTR;
typedef CK_ULONG CK_MAC_GENERAL_PARAMS;
typedef CK_MAC_GENERAL_PARAMS * CK_MAC_GENERAL_PARAMS_PTR;
typedef struct CK_DES_CBC_ENCRYPT_DATA_PARAMS {
  CK_BYTE iv[8];
  CK_BYTE_PTR pData;
  CK_ULONG length;
} CK_DES_CBC_ENCRYPT_DATA_PARAMS;
typedef CK_DES_CBC_ENCRYPT_DATA_PARAMS * CK_DES_CBC_ENCRYPT_DATA_PARAMS_PTR;
typedef struct CK_AES_CBC_ENCRYPT_DATA_PARAMS {
  CK_BYTE iv[16];
  CK_BYTE_PTR pData;
  CK_ULONG length;
} CK_AES_CBC_ENCRYPT_DATA_PARAMS;
typedef CK_AES_CBC_ENCRYPT_DATA_PARAMS * CK_AES_CBC_ENCRYPT_DATA_PARAMS_PTR;
typedef struct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
  CK_ULONG ulPasswordLen;
  CK_BYTE_PTR pPassword;
  CK_ULONG ulPublicDataLen;
  CK_BYTE_PTR pPublicData;
  CK_ULONG ulPAndGLen;
  CK_ULONG ulQLen;
  CK_ULONG ulRandomLen;
  CK_BYTE_PTR pRandomA;
  CK_BYTE_PTR pPrimeP;
  CK_BYTE_PTR pBaseG;
  CK_BYTE_PTR pSubprimeQ;
} CK_SKIPJACK_PRIVATE_WRAP_PARAMS;
typedef CK_SKIPJACK_PRIVATE_WRAP_PARAMS *
  CK_SKIPJACK_PRIVATE_WRAP_PARAMS_PTR;
typedef struct CK_SKIPJACK_RELAYX_PARAMS {
  CK_ULONG ulOldWrappedXLen;
  CK_BYTE_PTR pOldWrappedX;
  CK_ULONG ulOldPasswordLen;
  CK_BYTE_PTR pOldPassword;
  CK_ULONG ulOldPublicDataLen;
  CK_BYTE_PTR pOldPublicData;
  CK_ULONG ulOldRandomLen;
  CK_BYTE_PTR pOldRandomA;
  CK_ULONG ulNewPasswordLen;
  CK_BYTE_PTR pNewPassword;
  CK_ULONG ulNewPublicDataLen;
  CK_BYTE_PTR pNewPublicData;
  CK_ULONG ulNewRandomLen;
  CK_BYTE_PTR pNewRandomA;
} CK_SKIPJACK_RELAYX_PARAMS;
typedef CK_SKIPJACK_RELAYX_PARAMS *
  CK_SKIPJACK_RELAYX_PARAMS_PTR;
typedef struct CK_PBE_PARAMS {
  CK_BYTE_PTR pInitVector;
  CK_UTF8CHAR_PTR pPassword;
  CK_ULONG ulPasswordLen;
  CK_BYTE_PTR pSalt;
  CK_ULONG ulSaltLen;
  CK_ULONG ulIteration;
} CK_PBE_PARAMS;
typedef CK_PBE_PARAMS * CK_PBE_PARAMS_PTR;
typedef struct CK_KEY_WRAP_SET_OAEP_PARAMS {
  CK_BYTE bBC;
  CK_BYTE_PTR pX;
  CK_ULONG ulXLen;
} CK_KEY_WRAP_SET_OAEP_PARAMS;
typedef CK_KEY_WRAP_SET_OAEP_PARAMS *
  CK_KEY_WRAP_SET_OAEP_PARAMS_PTR;
typedef struct CK_SSL3_RANDOM_DATA {
  CK_BYTE_PTR pClientRandom;
  CK_ULONG ulClientRandomLen;
  CK_BYTE_PTR pServerRandom;
  CK_ULONG ulServerRandomLen;
} CK_SSL3_RANDOM_DATA;
typedef struct CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
  CK_SSL3_RANDOM_DATA RandomInfo;
  CK_VERSION_PTR pVersion;
} CK_SSL3_MASTER_KEY_DERIVE_PARAMS;
typedef struct CK_SSL3_MASTER_KEY_DERIVE_PARAMS *
  CK_SSL3_MASTER_KEY_DERIVE_PARAMS_PTR;
typedef struct CK_SSL3_KEY_MAT_OUT {
  CK_OBJECT_HANDLE hClientMacSecret;
  CK_OBJECT_HANDLE hServerMacSecret;
  CK_OBJECT_HANDLE hClientKey;
  CK_OBJECT_HANDLE hServerKey;
  CK_BYTE_PTR pIVClient;
  CK_BYTE_PTR pIVServer;
} CK_SSL3_KEY_MAT_OUT;
typedef CK_SSL3_KEY_MAT_OUT * CK_SSL3_KEY_MAT_OUT_PTR;
typedef struct CK_SSL3_KEY_MAT_PARAMS {
  CK_ULONG ulMacSizeInBits;
  CK_ULONG ulKeySizeInBits;
  CK_ULONG ulIVSizeInBits;
  CK_BBOOL bIsExport;
  CK_SSL3_RANDOM_DATA RandomInfo;
  CK_SSL3_KEY_MAT_OUT_PTR pReturnedKeyMaterial;
} CK_SSL3_KEY_MAT_PARAMS;
typedef CK_SSL3_KEY_MAT_PARAMS * CK_SSL3_KEY_MAT_PARAMS_PTR;
typedef struct CK_WTLS_RANDOM_DATA {
  CK_BYTE_PTR pClientRandom;
  CK_ULONG ulClientRandomLen;
  CK_BYTE_PTR pServerRandom;
  CK_ULONG ulServerRandomLen;
} CK_WTLS_RANDOM_DATA;
typedef CK_WTLS_RANDOM_DATA * CK_WTLS_RANDOM_DATA_PTR;
typedef struct CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
  CK_MECHANISM_TYPE DigestMechanism;
  CK_WTLS_RANDOM_DATA RandomInfo;
  CK_BYTE_PTR pVersion;
} CK_WTLS_MASTER_KEY_DERIVE_PARAMS;
typedef CK_WTLS_MASTER_KEY_DERIVE_PARAMS *
  CK_WTLS_MASTER_KEY_DERIVE_PARAMS_PTR;
typedef struct CK_WTLS_PRF_PARAMS {
  CK_MECHANISM_TYPE DigestMechanism;
  CK_BYTE_PTR pSeed;
  CK_ULONG ulSeedLen;
  CK_BYTE_PTR pLabel;
  CK_ULONG ulLabelLen;
  CK_BYTE_PTR pOutput;
  CK_ULONG_PTR pulOutputLen;
} CK_WTLS_PRF_PARAMS;
typedef CK_WTLS_PRF_PARAMS * CK_WTLS_PRF_PARAMS_PTR;
typedef struct CK_WTLS_KEY_MAT_OUT {
  CK_OBJECT_HANDLE hMacSecret;
  CK_OBJECT_HANDLE hKey;
  CK_BYTE_PTR pIV;
} CK_WTLS_KEY_MAT_OUT;
typedef CK_WTLS_KEY_MAT_OUT * CK_WTLS_KEY_MAT_OUT_PTR;
typedef struct CK_WTLS_KEY_MAT_PARAMS {
  CK_MECHANISM_TYPE DigestMechanism;
  CK_ULONG ulMacSizeInBits;
  CK_ULONG ulKeySizeInBits;
  CK_ULONG ulIVSizeInBits;
  CK_ULONG ulSequenceNumber;
  CK_BBOOL bIsExport;
  CK_WTLS_RANDOM_DATA RandomInfo;
  CK_WTLS_KEY_MAT_OUT_PTR pReturnedKeyMaterial;
} CK_WTLS_KEY_MAT_PARAMS;
typedef CK_WTLS_KEY_MAT_PARAMS * CK_WTLS_KEY_MAT_PARAMS_PTR;
typedef struct CK_CMS_SIG_PARAMS {
  CK_OBJECT_HANDLE certificateHandle;
  CK_MECHANISM_PTR pSigningMechanism;
  CK_MECHANISM_PTR pDigestMechanism;
  CK_UTF8CHAR_PTR pContentType;
  CK_BYTE_PTR pRequestedAttributes;
  CK_ULONG ulRequestedAttributesLen;
  CK_BYTE_PTR pRequiredAttributes;
  CK_ULONG ulRequiredAttributesLen;
} CK_CMS_SIG_PARAMS;
typedef CK_CMS_SIG_PARAMS * CK_CMS_SIG_PARAMS_PTR;
typedef struct CK_KEY_DERIVATION_STRING_DATA {
  CK_BYTE_PTR pData;
  CK_ULONG ulLen;
} CK_KEY_DERIVATION_STRING_DATA;
typedef CK_KEY_DERIVATION_STRING_DATA *
  CK_KEY_DERIVATION_STRING_DATA_PTR;
typedef CK_ULONG CK_EXTRACT_PARAMS;
typedef CK_EXTRACT_PARAMS * CK_EXTRACT_PARAMS_PTR;
typedef CK_ULONG CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE;
typedef CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE * CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE_PTR;
enum {
	CKP_PKCS5_PBKD2_HMAC_SHA1 = 0x00000001UL,
	CKP_PKCS5_PBKD2_HMAC_GOSTR3411 = 0x00000002UL,
	CKP_PKCS5_PBKD2_HMAC_SHA224 = 0x00000003UL,
	CKP_PKCS5_PBKD2_HMAC_SHA256 = 0x00000004UL,
	CKP_PKCS5_PBKD2_HMAC_SHA384 = 0x00000005UL,
	CKP_PKCS5_PBKD2_HMAC_SHA512 = 0x00000006UL,
	CKP_PKCS5_PBKD2_HMAC_SHA512_224 = 0x00000007UL,
	CKP_PKCS5_PBKD2_HMAC_SHA512_256 = 0x00000008UL,
};
typedef CK_ULONG CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE;
typedef CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE * CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE_PTR;
enum {
	CKZ_SALT_SPECIFIED   = 0x00000001UL,
};
typedef struct CK_PKCS5_PBKD2_PARAMS {
        CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE saltSource;
        CK_VOID_PTR pSaltSourceData;
        CK_ULONG ulSaltSourceDataLen;
        CK_ULONG iterations;
        CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;
        CK_VOID_PTR pPrfData;
        CK_ULONG ulPrfDataLen;
        CK_UTF8CHAR_PTR pPassword;
        CK_ULONG_PTR ulPasswordLen;
} CK_PKCS5_PBKD2_PARAMS;
typedef CK_PKCS5_PBKD2_PARAMS * CK_PKCS5_PBKD2_PARAMS_PTR;
typedef CK_ULONG CK_OTP_PARAM_TYPE;
typedef CK_OTP_PARAM_TYPE CK_PARAM_TYPE;
typedef struct CK_OTP_PARAM {
    CK_OTP_PARAM_TYPE type;
    CK_VOID_PTR pValue;
    CK_ULONG ulValueLen;
} CK_OTP_PARAM;
typedef CK_OTP_PARAM * CK_OTP_PARAM_PTR;
typedef struct CK_OTP_PARAMS {
    CK_OTP_PARAM_PTR pParams;
    CK_ULONG ulCount;
} CK_OTP_PARAMS;
typedef CK_OTP_PARAMS * CK_OTP_PARAMS_PTR;
typedef struct CK_OTP_SIGNATURE_INFO {
    CK_OTP_PARAM_PTR pParams;
    CK_ULONG ulCount;
} CK_OTP_SIGNATURE_INFO;
typedef CK_OTP_SIGNATURE_INFO * CK_OTP_SIGNATURE_INFO_PTR;
enum {
	CK_OTP_VALUE         = 0UL,
	CK_OTP_PIN           = 1UL,
	CK_OTP_CHALLENGE     = 2UL,
	CK_OTP_TIME          = 3UL,
	CK_OTP_COUNTER       = 4UL,
	CK_OTP_FLAGS         = 5UL,
	CK_OTP_OUTPUT_LENGTH = 6UL,
	CK_OTP_OUTPUT_FORMAT = 7UL,
	CKF_NEXT_OTP         = 0x00000001UL,
	CKF_EXCLUDE_TIME     = 0x00000002UL,
	CKF_EXCLUDE_COUNTER  = 0x00000004UL,
	CKF_EXCLUDE_CHALLENGE = 0x00000008UL,
	CKF_EXCLUDE_PIN      = 0x00000010UL,
	CKF_USER_FRIENDLY_OTP = 0x00000020UL,
};
typedef struct CK_KIP_PARAMS {
    CK_MECHANISM_PTR pMechanism;
    CK_OBJECT_HANDLE hKey;
    CK_BYTE_PTR pSeed;
    CK_ULONG ulSeedLen;
} CK_KIP_PARAMS;
typedef CK_KIP_PARAMS * CK_KIP_PARAMS_PTR;
typedef struct CK_AES_CTR_PARAMS {
    CK_ULONG ulCounterBits;
    CK_BYTE cb[16];
} CK_AES_CTR_PARAMS;
typedef CK_AES_CTR_PARAMS * CK_AES_CTR_PARAMS_PTR;
typedef struct CK_GCM_PARAMS {
  CK_BYTE_PTR pIv;
  CK_ULONG ulIvLen;
  CK_ULONG ulIvBits;
  CK_BYTE_PTR pAAD;
  CK_ULONG ulAADLen;
  CK_ULONG ulTagBits;
} CK_GCM_PARAMS;
typedef CK_GCM_PARAMS * CK_GCM_PARAMS_PTR;
typedef struct CK_CCM_PARAMS {
 CK_ULONG ulDataLen;
 CK_BYTE_PTR pNonce;
 CK_ULONG ulNonceLen;
 CK_BYTE_PTR pAAD;
 CK_ULONG ulAADLen;
 CK_ULONG ulMACLen;
} CK_CCM_PARAMS;
typedef CK_CCM_PARAMS * CK_CCM_PARAMS_PTR;
typedef struct CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS {
    CK_BYTE iv[16];
    CK_BYTE_PTR pData;
    CK_ULONG length;
} CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS;
typedef CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS * CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS_PTR;
typedef struct CK_ARIA_CBC_ENCRYPT_DATA_PARAMS {
    CK_BYTE iv[16];
    CK_BYTE_PTR pData;
    CK_ULONG length;
} CK_ARIA_CBC_ENCRYPT_DATA_PARAMS;
typedef CK_ARIA_CBC_ENCRYPT_DATA_PARAMS * CK_ARIA_CBC_ENCRYPT_DATA_PARAMS_PTR;
typedef struct CK_DSA_PARAMETER_GEN_PARAM {
    CK_MECHANISM_TYPE hash;
    CK_BYTE_PTR pSeed;
    CK_ULONG ulSeedLen;
    CK_ULONG ulIndex;
} CK_DSA_PARAMETER_GEN_PARAM;
typedef CK_DSA_PARAMETER_GEN_PARAM * CK_DSA_PARAMETER_GEN_PARAM_PTR;
typedef struct CK_ECDH_AES_KEY_WRAP_PARAMS {
    CK_ULONG ulAESKeyBits;
    CK_EC_KDF_TYPE kdf;
    CK_ULONG ulSharedDataLen;
    CK_BYTE_PTR pSharedData;
} CK_ECDH_AES_KEY_WRAP_PARAMS;
typedef CK_ECDH_AES_KEY_WRAP_PARAMS * CK_ECDH_AES_KEY_WRAP_PARAMS_PTR;
typedef CK_ULONG CK_JAVA_MIDP_SECURITY_DOMAIN;
typedef CK_ULONG CK_CERTIFICATE_CATEGORY;
typedef struct CK_RSA_AES_KEY_WRAP_PARAMS {
    CK_ULONG ulAESKeyBits;
    CK_RSA_PKCS_OAEP_PARAMS_PTR pOAEPParams;
} CK_RSA_AES_KEY_WRAP_PARAMS;
typedef CK_RSA_AES_KEY_WRAP_PARAMS * CK_RSA_AES_KEY_WRAP_PARAMS_PTR;
typedef struct CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    CK_SSL3_RANDOM_DATA RandomInfo;
    CK_VERSION_PTR pVersion;
    CK_MECHANISM_TYPE prfHashMechanism;
} CK_TLS12_MASTER_KEY_DERIVE_PARAMS;
typedef CK_TLS12_MASTER_KEY_DERIVE_PARAMS * CK_TLS12_MASTER_KEY_DERIVE_PARAMS_PTR;
typedef struct CK_TLS12_KEY_MAT_PARAMS {
    CK_ULONG ulMacSizeInBits;
    CK_ULONG ulKeySizeInBits;
    CK_ULONG ulIVSizeInBits;
    CK_BBOOL bIsExport;
    CK_SSL3_RANDOM_DATA RandomInfo;
    CK_SSL3_KEY_MAT_OUT_PTR pReturnedKeyMaterial;
    CK_MECHANISM_TYPE prfHashMechanism;
} CK_TLS12_KEY_MAT_PARAMS;
typedef CK_TLS12_KEY_MAT_PARAMS * CK_TLS12_KEY_MAT_PARAMS_PTR;
typedef struct CK_TLS_KDF_PARAMS {
    CK_MECHANISM_TYPE prfMechanism;
    CK_BYTE_PTR pLabel;
    CK_ULONG ulLabelLength;
    CK_SSL3_RANDOM_DATA RandomInfo;
    CK_BYTE_PTR pContextData;
    CK_ULONG ulContextDataLength;
} CK_TLS_KDF_PARAMS;
typedef CK_TLS_KDF_PARAMS * CK_TLS_KDF_PARAMS_PTR;
typedef struct CK_TLS_MAC_PARAMS {
    CK_MECHANISM_TYPE prfHashMechanism;
    CK_ULONG ulMacLength;
    CK_ULONG ulServerOrClient;
} CK_TLS_MAC_PARAMS;
typedef CK_TLS_MAC_PARAMS * CK_TLS_MAC_PARAMS_PTR;
typedef struct CK_GOSTR3410_DERIVE_PARAMS {
    CK_EC_KDF_TYPE kdf;
    CK_BYTE_PTR pPublicData;
    CK_ULONG ulPublicDataLen;
    CK_BYTE_PTR pUKM;
    CK_ULONG ulUKMLen;
} CK_GOSTR3410_DERIVE_PARAMS;
typedef CK_GOSTR3410_DERIVE_PARAMS * CK_GOSTR3410_DERIVE_PARAMS_PTR;
typedef struct CK_GOSTR3410_KEY_WRAP_PARAMS {
    CK_BYTE_PTR pWrapOID;
    CK_ULONG ulWrapOIDLen;
    CK_BYTE_PTR pUKM;
    CK_ULONG ulUKMLen;
    CK_OBJECT_HANDLE hKey;
} CK_GOSTR3410_KEY_WRAP_PARAMS;
typedef CK_GOSTR3410_KEY_WRAP_PARAMS * CK_GOSTR3410_KEY_WRAP_PARAMS_PTR;

extern CK_RV C_Initialize
(
  CK_VOID_PTR pInitArgs
);
extern CK_RV C_Finalize
(
  CK_VOID_PTR pReserved
);
extern CK_RV C_GetInfo
(
  CK_INFO_PTR pInfo
);
extern CK_RV C_GetFunctionList
(
  CK_FUNCTION_LIST_PTR_PTR ppFunctionList
);
extern CK_RV C_GetSlotList
(
  CK_BBOOL tokenPresent,
  CK_SLOT_ID_PTR pSlotList,
  CK_ULONG_PTR pulCount
);
extern CK_RV C_GetSlotInfo
(
  CK_SLOT_ID slotID,
  CK_SLOT_INFO_PTR pInfo
);
extern CK_RV C_GetTokenInfo
(
  CK_SLOT_ID slotID,
  CK_TOKEN_INFO_PTR pInfo
);
extern CK_RV C_GetMechanismList
(
  CK_SLOT_ID slotID,
  CK_MECHANISM_TYPE_PTR pMechanismList,
  CK_ULONG_PTR pulCount
);
extern CK_RV C_GetMechanismInfo
(
  CK_SLOT_ID slotID,
  CK_MECHANISM_TYPE type,
  CK_MECHANISM_INFO_PTR pInfo
);
extern CK_RV C_InitToken
(
  CK_SLOT_ID slotID,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen,
  CK_UTF8CHAR_PTR pLabel
);
extern CK_RV C_InitPIN
(
  CK_SESSION_HANDLE hSession,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen
);
extern CK_RV C_SetPIN
(
  CK_SESSION_HANDLE hSession,
  CK_UTF8CHAR_PTR pOldPin,
  CK_ULONG ulOldLen,
  CK_UTF8CHAR_PTR pNewPin,
  CK_ULONG ulNewLen
);
extern CK_RV C_OpenSession
(
  CK_SLOT_ID slotID,
  CK_FLAGS flags,
  CK_VOID_PTR pApplication,
  CK_NOTIFY Notify,
  CK_SESSION_HANDLE_PTR phSession
);
extern CK_RV C_CloseSession
(
  CK_SESSION_HANDLE hSession
);
extern CK_RV C_CloseAllSessions
(
  CK_SLOT_ID slotID
);
extern CK_RV C_GetSessionInfo
(
  CK_SESSION_HANDLE hSession,
  CK_SESSION_INFO_PTR pInfo
);
extern CK_RV C_GetOperationState
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pOperationState,
  CK_ULONG_PTR pulOperationStateLen
);
extern CK_RV C_SetOperationState
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pOperationState,
  CK_ULONG ulOperationStateLen,
  CK_OBJECT_HANDLE hEncryptionKey,
  CK_OBJECT_HANDLE hAuthenticationKey
);
extern CK_RV C_Login
(
  CK_SESSION_HANDLE hSession,
  CK_USER_TYPE userType,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen
);
extern CK_RV C_Logout
(
  CK_SESSION_HANDLE hSession
);
extern CK_RV C_CreateObject
(
  CK_SESSION_HANDLE hSession,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phObject
);
extern CK_RV C_CopyObject
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phNewObject
);
extern CK_RV C_DestroyObject
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject
);
extern CK_RV C_GetObjectSize
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ULONG_PTR pulSize
);
extern CK_RV C_GetAttributeValue
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
extern CK_RV C_SetAttributeValue
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
extern CK_RV C_FindObjectsInit
(
  CK_SESSION_HANDLE hSession,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
extern CK_RV C_FindObjects
(
 CK_SESSION_HANDLE hSession,
 CK_OBJECT_HANDLE_PTR phObject,
 CK_ULONG ulMaxObjectCount,
 CK_ULONG_PTR pulObjectCount
);
extern CK_RV C_FindObjectsFinal
(
  CK_SESSION_HANDLE hSession
);
extern CK_RV C_EncryptInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_Encrypt
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pEncryptedData,
  CK_ULONG_PTR pulEncryptedDataLen
);
extern CK_RV C_EncryptUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
extern CK_RV C_EncryptFinal
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pLastEncryptedPart,
  CK_ULONG_PTR pulLastEncryptedPartLen
);
extern CK_RV C_DecryptInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_Decrypt
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedData,
  CK_ULONG ulEncryptedDataLen,
  CK_BYTE_PTR pData,
  CK_ULONG_PTR pulDataLen
);
extern CK_RV C_DecryptUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
extern CK_RV C_DecryptFinal
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pLastPart,
  CK_ULONG_PTR pulLastPartLen
);
extern CK_RV C_DigestInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism
);
extern CK_RV C_Digest
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pDigest,
  CK_ULONG_PTR pulDigestLen
);
extern CK_RV C_DigestUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
extern CK_RV C_DigestKey
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_DigestFinal
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pDigest,
  CK_ULONG_PTR pulDigestLen
);
extern CK_RV C_SignInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_Sign
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
extern CK_RV C_SignUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
extern CK_RV C_SignFinal
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
extern CK_RV C_SignRecoverInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_SignRecover
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
extern CK_RV C_VerifyInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_Verify
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen
);
extern CK_RV C_VerifyUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
extern CK_RV C_VerifyFinal
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen
);
extern CK_RV C_VerifyRecoverInit
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
extern CK_RV C_VerifyRecover
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen,
  CK_BYTE_PTR pData,
  CK_ULONG_PTR pulDataLen
);
extern CK_RV C_DigestEncryptUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
extern CK_RV C_DecryptDigestUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
extern CK_RV C_SignEncryptUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
extern CK_RV C_DecryptVerifyUpdate
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
extern CK_RV C_GenerateKey
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phKey
);
extern CK_RV C_GenerateKeyPair
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_ATTRIBUTE_PTR pPublicKeyTemplate,
  CK_ULONG ulPublicKeyAttributeCount,
  CK_ATTRIBUTE_PTR pPrivateKeyTemplate,
  CK_ULONG ulPrivateKeyAttributeCount,
  CK_OBJECT_HANDLE_PTR phPublicKey,
  CK_OBJECT_HANDLE_PTR phPrivateKey
);
extern CK_RV C_WrapKey
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hWrappingKey,
  CK_OBJECT_HANDLE hKey,
  CK_BYTE_PTR pWrappedKey,
  CK_ULONG_PTR pulWrappedKeyLen
);
extern CK_RV C_UnwrapKey
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hUnwrappingKey,
  CK_BYTE_PTR pWrappedKey,
  CK_ULONG ulWrappedKeyLen,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulAttributeCount,
  CK_OBJECT_HANDLE_PTR phKey
);
extern CK_RV C_DeriveKey
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hBaseKey,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulAttributeCount,
  CK_OBJECT_HANDLE_PTR phKey
);
extern CK_RV C_SeedRandom
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSeed,
  CK_ULONG ulSeedLen
);
extern CK_RV C_GenerateRandom
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR RandomData,
  CK_ULONG ulRandomLen
);
extern CK_RV C_GetFunctionStatus
(
  CK_SESSION_HANDLE hSession
);
extern CK_RV C_CancelFunction
(
  CK_SESSION_HANDLE hSession
);
extern CK_RV C_WaitForSlotEvent
(
  CK_FLAGS flags,
  CK_SLOT_ID_PTR pSlot,
  CK_VOID_PTR pRserved
);
typedef CK_RV (* CK_C_Initialize)
(
  CK_VOID_PTR pInitArgs
);
typedef CK_RV (* CK_C_Finalize)
(
  CK_VOID_PTR pReserved
);
typedef CK_RV (* CK_C_GetInfo)
(
  CK_INFO_PTR pInfo
);
typedef CK_RV (* CK_C_GetFunctionList)
(
  CK_FUNCTION_LIST_PTR_PTR ppFunctionList
);
typedef CK_RV (* CK_C_GetSlotList)
(
  CK_BBOOL tokenPresent,
  CK_SLOT_ID_PTR pSlotList,
  CK_ULONG_PTR pulCount
);
typedef CK_RV (* CK_C_GetSlotInfo)
(
  CK_SLOT_ID slotID,
  CK_SLOT_INFO_PTR pInfo
);
typedef CK_RV (* CK_C_GetTokenInfo)
(
  CK_SLOT_ID slotID,
  CK_TOKEN_INFO_PTR pInfo
);
typedef CK_RV (* CK_C_GetMechanismList)
(
  CK_SLOT_ID slotID,
  CK_MECHANISM_TYPE_PTR pMechanismList,
  CK_ULONG_PTR pulCount
);
typedef CK_RV (* CK_C_GetMechanismInfo)
(
  CK_SLOT_ID slotID,
  CK_MECHANISM_TYPE type,
  CK_MECHANISM_INFO_PTR pInfo
);
typedef CK_RV (* CK_C_InitToken)
(
  CK_SLOT_ID slotID,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen,
  CK_UTF8CHAR_PTR pLabel
);
typedef CK_RV (* CK_C_InitPIN)
(
  CK_SESSION_HANDLE hSession,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen
);
typedef CK_RV (* CK_C_SetPIN)
(
  CK_SESSION_HANDLE hSession,
  CK_UTF8CHAR_PTR pOldPin,
  CK_ULONG ulOldLen,
  CK_UTF8CHAR_PTR pNewPin,
  CK_ULONG ulNewLen
);
typedef CK_RV (* CK_C_OpenSession)
(
  CK_SLOT_ID slotID,
  CK_FLAGS flags,
  CK_VOID_PTR pApplication,
  CK_NOTIFY Notify,
  CK_SESSION_HANDLE_PTR phSession
);
typedef CK_RV (* CK_C_CloseSession)
(
  CK_SESSION_HANDLE hSession
);
typedef CK_RV (* CK_C_CloseAllSessions)
(
  CK_SLOT_ID slotID
);
typedef CK_RV (* CK_C_GetSessionInfo)
(
  CK_SESSION_HANDLE hSession,
  CK_SESSION_INFO_PTR pInfo
);
typedef CK_RV (* CK_C_GetOperationState)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pOperationState,
  CK_ULONG_PTR pulOperationStateLen
);
typedef CK_RV (* CK_C_SetOperationState)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pOperationState,
  CK_ULONG ulOperationStateLen,
  CK_OBJECT_HANDLE hEncryptionKey,
  CK_OBJECT_HANDLE hAuthenticationKey
);
typedef CK_RV (* CK_C_Login)
(
  CK_SESSION_HANDLE hSession,
  CK_USER_TYPE userType,
  CK_UTF8CHAR_PTR pPin,
  CK_ULONG ulPinLen
);
typedef CK_RV (* CK_C_Logout)
(
  CK_SESSION_HANDLE hSession
);
typedef CK_RV (* CK_C_CreateObject)
(
  CK_SESSION_HANDLE hSession,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phObject
);
typedef CK_RV (* CK_C_CopyObject)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phNewObject
);
typedef CK_RV (* CK_C_DestroyObject)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject
);
typedef CK_RV (* CK_C_GetObjectSize)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ULONG_PTR pulSize
);
typedef CK_RV (* CK_C_GetAttributeValue)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
typedef CK_RV (* CK_C_SetAttributeValue)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hObject,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
typedef CK_RV (* CK_C_FindObjectsInit)
(
  CK_SESSION_HANDLE hSession,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount
);
typedef CK_RV (* CK_C_FindObjects)
(
 CK_SESSION_HANDLE hSession,
 CK_OBJECT_HANDLE_PTR phObject,
 CK_ULONG ulMaxObjectCount,
 CK_ULONG_PTR pulObjectCount
);
typedef CK_RV (* CK_C_FindObjectsFinal)
(
  CK_SESSION_HANDLE hSession
);
typedef CK_RV (* CK_C_EncryptInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_Encrypt)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pEncryptedData,
  CK_ULONG_PTR pulEncryptedDataLen
);
typedef CK_RV (* CK_C_EncryptUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
typedef CK_RV (* CK_C_EncryptFinal)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pLastEncryptedPart,
  CK_ULONG_PTR pulLastEncryptedPartLen
);
typedef CK_RV (* CK_C_DecryptInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_Decrypt)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedData,
  CK_ULONG ulEncryptedDataLen,
  CK_BYTE_PTR pData,
  CK_ULONG_PTR pulDataLen
);
typedef CK_RV (* CK_C_DecryptUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
typedef CK_RV (* CK_C_DecryptFinal)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pLastPart,
  CK_ULONG_PTR pulLastPartLen
);
typedef CK_RV (* CK_C_DigestInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism
);
typedef CK_RV (* CK_C_Digest)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pDigest,
  CK_ULONG_PTR pulDigestLen
);
typedef CK_RV (* CK_C_DigestUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
typedef CK_RV (* CK_C_DigestKey)
(
  CK_SESSION_HANDLE hSession,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_DigestFinal)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pDigest,
  CK_ULONG_PTR pulDigestLen
);
typedef CK_RV (* CK_C_SignInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_Sign)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
typedef CK_RV (* CK_C_SignUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
typedef CK_RV (* CK_C_SignFinal)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
typedef CK_RV (* CK_C_SignRecoverInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_SignRecover)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG_PTR pulSignatureLen
);
typedef CK_RV (* CK_C_VerifyInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_Verify)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pData,
  CK_ULONG ulDataLen,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen
);
typedef CK_RV (* CK_C_VerifyUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen
);
typedef CK_RV (* CK_C_VerifyFinal)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen
);
typedef CK_RV (* CK_C_VerifyRecoverInit)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hKey
);
typedef CK_RV (* CK_C_VerifyRecover)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSignature,
  CK_ULONG ulSignatureLen,
  CK_BYTE_PTR pData,
  CK_ULONG_PTR pulDataLen
);
typedef CK_RV (* CK_C_DigestEncryptUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
typedef CK_RV (* CK_C_DecryptDigestUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
typedef CK_RV (* CK_C_SignEncryptUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pPart,
  CK_ULONG ulPartLen,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG_PTR pulEncryptedPartLen
);
typedef CK_RV (* CK_C_DecryptVerifyUpdate)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pEncryptedPart,
  CK_ULONG ulEncryptedPartLen,
  CK_BYTE_PTR pPart,
  CK_ULONG_PTR pulPartLen
);
typedef CK_RV (* CK_C_GenerateKey)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulCount,
  CK_OBJECT_HANDLE_PTR phKey
);
typedef CK_RV (* CK_C_GenerateKeyPair)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_ATTRIBUTE_PTR pPublicKeyTemplate,
  CK_ULONG ulPublicKeyAttributeCount,
  CK_ATTRIBUTE_PTR pPrivateKeyTemplate,
  CK_ULONG ulPrivateKeyAttributeCount,
  CK_OBJECT_HANDLE_PTR phPublicKey,
  CK_OBJECT_HANDLE_PTR phPrivateKey
);
typedef CK_RV (* CK_C_WrapKey)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hWrappingKey,
  CK_OBJECT_HANDLE hKey,
  CK_BYTE_PTR pWrappedKey,
  CK_ULONG_PTR pulWrappedKeyLen
);
typedef CK_RV (* CK_C_UnwrapKey)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hUnwrappingKey,
  CK_BYTE_PTR pWrappedKey,
  CK_ULONG ulWrappedKeyLen,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulAttributeCount,
  CK_OBJECT_HANDLE_PTR phKey
);
typedef CK_RV (* CK_C_DeriveKey)
(
  CK_SESSION_HANDLE hSession,
  CK_MECHANISM_PTR pMechanism,
  CK_OBJECT_HANDLE hBaseKey,
  CK_ATTRIBUTE_PTR pTemplate,
  CK_ULONG ulAttributeCount,
  CK_OBJECT_HANDLE_PTR phKey
);
typedef CK_RV (* CK_C_SeedRandom)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR pSeed,
  CK_ULONG ulSeedLen
);
typedef CK_RV (* CK_C_GenerateRandom)
(
  CK_SESSION_HANDLE hSession,
  CK_BYTE_PTR RandomData,
  CK_ULONG ulRandomLen
);
typedef CK_RV (* CK_C_GetFunctionStatus)
(
  CK_SESSION_HANDLE hSession
);
typedef CK_RV (* CK_C_CancelFunction)
(
  CK_SESSION_HANDLE hSession
);
typedef CK_RV (* CK_C_WaitForSlotEvent)
(
  CK_FLAGS flags,
  CK_SLOT_ID_PTR pSlot,
  CK_VOID_PTR pRserved
);
CK_C_Initialize C_Initialize;
CK_C_Finalize C_Finalize;
CK_C_GetInfo C_GetInfo;
CK_C_GetFunctionList C_GetFunctionList;
CK_C_GetSlotList C_GetSlotList;
CK_C_GetSlotInfo C_GetSlotInfo;
CK_C_GetTokenInfo C_GetTokenInfo;
CK_C_GetMechanismList C_GetMechanismList;
CK_C_GetMechanismInfo C_GetMechanismInfo;
CK_C_InitToken C_InitToken;
CK_C_InitPIN C_InitPIN;
CK_C_SetPIN C_SetPIN;
CK_C_OpenSession C_OpenSession;
CK_C_CloseSession C_CloseSession;
CK_C_CloseAllSessions C_CloseAllSessions;
CK_C_GetSessionInfo C_GetSessionInfo;
CK_C_GetOperationState C_GetOperationState;
CK_C_SetOperationState C_SetOperationState;
CK_C_Login C_Login;
CK_C_Logout C_Logout;
CK_C_CreateObject C_CreateObject;
CK_C_CopyObject C_CopyObject;
CK_C_DestroyObject C_DestroyObject;
CK_C_GetObjectSize C_GetObjectSize;
CK_C_GetAttributeValue C_GetAttributeValue;
CK_C_SetAttributeValue C_SetAttributeValue;
CK_C_FindObjectsInit C_FindObjectsInit;
CK_C_FindObjects C_FindObjects;
CK_C_FindObjectsFinal C_FindObjectsFinal;
CK_C_EncryptInit C_EncryptInit;
CK_C_Encrypt C_Encrypt;
CK_C_EncryptUpdate C_EncryptUpdate;
CK_C_EncryptFinal C_EncryptFinal;
CK_C_DecryptInit C_DecryptInit;
CK_C_Decrypt C_Decrypt;
CK_C_DecryptUpdate C_DecryptUpdate;
CK_C_DecryptFinal C_DecryptFinal;
CK_C_DigestInit C_DigestInit;
CK_C_Digest C_Digest;
CK_C_DigestUpdate C_DigestUpdate;
CK_C_DigestKey C_DigestKey;
CK_C_DigestFinal C_DigestFinal;
CK_C_SignInit C_SignInit;
CK_C_Sign C_Sign;
CK_C_SignUpdate C_SignUpdate;
CK_C_SignFinal C_SignFinal;
CK_C_SignRecoverInit C_SignRecoverInit;
CK_C_SignRecover C_SignRecover;
CK_C_VerifyInit C_VerifyInit;
CK_C_Verify C_Verify;
CK_C_VerifyUpdate C_VerifyUpdate;
CK_C_VerifyFinal C_VerifyFinal;
CK_C_VerifyRecoverInit C_VerifyRecoverInit;
CK_C_VerifyRecover C_VerifyRecover;
CK_C_DigestEncryptUpdate C_DigestEncryptUpdate;
CK_C_DecryptDigestUpdate C_DecryptDigestUpdate;
CK_C_SignEncryptUpdate C_SignEncryptUpdate;
CK_C_DecryptVerifyUpdate C_DecryptVerifyUpdate;
CK_C_GenerateKey C_GenerateKey;
CK_C_GenerateKeyPair C_GenerateKeyPair;
CK_C_WrapKey C_WrapKey;
CK_C_UnwrapKey C_UnwrapKey;
CK_C_DeriveKey C_DeriveKey;
CK_C_SeedRandom C_SeedRandom;
CK_C_GenerateRandom C_GenerateRandom;
CK_C_GetFunctionStatus C_GetFunctionStatus;
CK_C_CancelFunction C_CancelFunction;
CK_C_WaitForSlotEvent C_WaitForSlotEvent;
]]

local C = ffi.load'eTPKCS11.dll'
local M = {C = C, __index = C}
setmetatable(M, M)
local assert = assert
local format = string.format
local print = print
local ipairs = ipairs
local num = tonumber
local pp = require'pp'
local bit = bit
setfenv(1, M)

local function check(ret)
	assert(ret == CKR_OK, format('%x', ret))
end

local function ok(ret)
	if ret ~= CKR_OK then return false, ret end
	return true
end

function Initialize()
	check(C_Initialize(nil))
end

function Finalize()
	check(C_Finalize(nil))
end

local ulong_buf = ffi.new'CK_ULONG[1]'

function GetSlotList(present)
	check(C_GetSlotList(present or false, nil, ulong_buf))
	local n = ulong_buf[0]
	local slots = ffi.new('CK_SLOT_ID[?]', n)
	check(C_GetSlotList(present, slots, ulong_buf))
	local t = {}
	for i = 0, n-1 do
		t[i+1] = slots[i]
	end
	return t
end

local function ver(v) return {major = v.major, minor = v.minor} end
local function trim(s) return s:gsub('%s*$', '') end

function GetSlotInfo(slot_id)
	local si = ffi.new'CK_SLOT_INFO'
	check(C_GetSlotInfo(slot_id, si))
	return {
		description = trim(ffi.string(si.slotDescription, 64));
		manufacturer_id = trim(ffi.string(si.manufacturerID, 32));
		flags = si.flags;
		hardware_version = ver(si.hardwareVersion);
		firmware_version = ver(si.firmwareVersion);
	}
end

function GetTokenInfo(slot_id)
	local ti = ffi.new'CK_TOKEN_INFO'
	check(C_GetTokenInfo(slot_id, ti))
	return {
		label = trim(ffi.string(ti.label, 32)),
		manufacturer_id = trim(ffi.string(ti.manufacturerID, 32)),
		model = trim(ffi.string(ti.model, 16)),
		serial_number = trim(ffi.string(ti.serialNumber, 16)),
		flags = ti.flags,
		max_session_count = num(ti.ulMaxSessionCount);
		session_count = num(ti.ulSessionCount);
		max_rw_session_count = num(ti.ulMaxRwSessionCount);
		rw_session_count = num(ti.ulRwSessionCount);
		max_pin_len = num(ti.ulMaxPinLen);
		min_pin_len = num(ti.ulMinPinLen);
		total_public_memory = num(ti.ulTotalPublicMemory);
		free_public_memory = num(ti.ulFreePublicMemory);
		total_private_memory = num(ti.ulTotalPrivateMemory);
		free_private_memory = num(ti.ulFreePrivateMemory);
		hardware_version = ver(ti.hardwareVersion);
		firmware_version = ver(ti.firmwareVersion);
		utc_time = trim(ffi.string(ti.utcTime, 16));
	}
end

function OpenSession(slot_id, rw)
	local flags = bit.bor(CKF_SERIAL_SESSION, CKF_RW_SESSION or 0)
	check(C_OpenSession(slot_id, flags, nil, nil, ulong_buf))
	return ulong_buf[0]
end

function CloseSession(session_id)
	check(C_CloseSession(session_id))
end

function Login(session, pin, admin)
	local pin_ptr = ffi.cast('CK_UTF8CHAR_PTR', pin)
	return ok(C_Login(session, admin and CKU_SO or CKU_USER, pin_ptr, #pin))
end

function Logout(session_id)
	check(C_Logout(session_id))
end

--self-test ------------------------------------------------------------------

if not ... then

Initialize()

for i, slot_id in ipairs(GetSlotList(true)) do
	print('Slot', slot_id)
	pp('GetSlotInfo', GetSlotInfo(slot_id))
	local ti = GetTokenInfo(slot_id)
	pp('GetTokenInfo', ti)
	local session_id = OpenSession(slot_id)
	assert(Login(session_id, '123456789'))
	Logout(session_id)
	CloseSession(session_id)
end

Finalize()

end

return M
